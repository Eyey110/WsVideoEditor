// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_video_editor_sdk.proto

#ifndef PROTOBUF_ws_5fvideo_5feditor_5fsdk_2eproto__INCLUDED
#define PROTOBUF_ws_5fvideo_5feditor_5fsdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace whensunset {
namespace wsvideoeditor {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

class EditorProject;
class EditorProjectPrivateData;
class MediaAsset;
class MediaFileHolder;
class MediaStreamHolder;
class Rational;
class TimeRange;

enum MediaAssetScaleType {
  MEDIA_ASSET_SCALE_DEFAULT = 0,
  MEDIA_ASSET_SCALE_FIT = 1,
  MEDIA_ASSET_SCALE_FILL = 2,
  MediaAssetScaleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MediaAssetScaleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MediaAssetScaleType_IsValid(int value);
const MediaAssetScaleType MediaAssetScaleType_MIN = MEDIA_ASSET_SCALE_DEFAULT;
const MediaAssetScaleType MediaAssetScaleType_MAX = MEDIA_ASSET_SCALE_FILL;
const int MediaAssetScaleType_ARRAYSIZE = MediaAssetScaleType_MAX + 1;

enum YuvAlphaType {
  YUV_ALPHA_TYPE_NONE = 0,
  YUV_ALPHA_TYPE_LEFT_RIGHT = 1,
  YUV_ALPHA_TYPE_TOP_BOTTOM = 2,
  YuvAlphaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YuvAlphaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YuvAlphaType_IsValid(int value);
const YuvAlphaType YuvAlphaType_MIN = YUV_ALPHA_TYPE_NONE;
const YuvAlphaType YuvAlphaType_MAX = YUV_ALPHA_TYPE_TOP_BOTTOM;
const int YuvAlphaType_ARRAYSIZE = YuvAlphaType_MAX + 1;

// ===================================================================

class Rational : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.Rational) */ {
 public:
  Rational();
  virtual ~Rational();

  Rational(const Rational& from);

  inline Rational& operator=(const Rational& from) {
    CopyFrom(from);
    return *this;
  }

  static const Rational& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Rational* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Rational* other);

  // implements Message ----------------------------------------------

  inline Rational* New() const { return New(NULL); }

  Rational* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Rational& from);
  void MergeFrom(const Rational& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rational* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int64 num() const;
  void set_num(::google::protobuf::int64 value);

  // optional int64 den = 2;
  void clear_den();
  static const int kDenFieldNumber = 2;
  ::google::protobuf::int64 den() const;
  void set_den(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.Rational)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int64 num_;
  ::google::protobuf::int64 den_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static Rational* default_instance_;
};
// -------------------------------------------------------------------

class TimeRange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }

  static const TimeRange& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TimeRange* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TimeRange* other);

  // implements Message ----------------------------------------------

  inline TimeRange* New() const { return New(NULL); }

  TimeRange* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  double start() const;
  void set_start(double value);

  // optional double duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  double duration() const;
  void set_duration(double value);

  // optional uint64 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.TimeRange)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  double start_;
  double duration_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static TimeRange* default_instance_;
};
// -------------------------------------------------------------------

class MediaStreamHolder : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.MediaStreamHolder) */ {
 public:
  MediaStreamHolder();
  virtual ~MediaStreamHolder();

  MediaStreamHolder(const MediaStreamHolder& from);

  inline MediaStreamHolder& operator=(const MediaStreamHolder& from) {
    CopyFrom(from);
    return *this;
  }

  static const MediaStreamHolder& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MediaStreamHolder* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MediaStreamHolder* other);

  // implements Message ----------------------------------------------

  inline MediaStreamHolder* New() const { return New(NULL); }

  MediaStreamHolder* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MediaStreamHolder& from);
  void MergeFrom(const MediaStreamHolder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaStreamHolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string codec_type = 3;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 3;
  const ::std::string& codec_type() const;
  void set_codec_type(const ::std::string& value);
  void set_codec_type(const char* value);
  void set_codec_type(const char* value, size_t size);
  ::std::string* mutable_codec_type();
  ::std::string* release_codec_type();
  void set_allocated_codec_type(::std::string* codec_type);

  // optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
  bool has_avg_frame_rate() const;
  void clear_avg_frame_rate();
  static const int kAvgFrameRateFieldNumber = 4;
  const ::whensunset::wsvideoeditor::model::Rational& avg_frame_rate() const;
  ::whensunset::wsvideoeditor::model::Rational* mutable_avg_frame_rate();
  ::whensunset::wsvideoeditor::model::Rational* release_avg_frame_rate();
  void set_allocated_avg_frame_rate(::whensunset::wsvideoeditor::model::Rational* avg_frame_rate);

  // optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
  bool has_time_base() const;
  void clear_time_base();
  static const int kTimeBaseFieldNumber = 5;
  const ::whensunset::wsvideoeditor::model::Rational& time_base() const;
  ::whensunset::wsvideoeditor::model::Rational* mutable_time_base();
  ::whensunset::wsvideoeditor::model::Rational* release_time_base();
  void set_allocated_time_base(::whensunset::wsvideoeditor::model::Rational* time_base);

  // optional int64 duration_ts = 6;
  void clear_duration_ts();
  static const int kDurationTsFieldNumber = 6;
  ::google::protobuf::int64 duration_ts() const;
  void set_duration_ts(::google::protobuf::int64 value);

  // optional int32 rotation = 7;
  void clear_rotation();
  static const int kRotationFieldNumber = 7;
  ::google::protobuf::int32 rotation() const;
  void set_rotation(::google::protobuf::int32 value);

  // optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
  bool has_sample_aspect_ratio() const;
  void clear_sample_aspect_ratio();
  static const int kSampleAspectRatioFieldNumber = 8;
  const ::whensunset::wsvideoeditor::model::Rational& sample_aspect_ratio() const;
  ::whensunset::wsvideoeditor::model::Rational* mutable_sample_aspect_ratio();
  ::whensunset::wsvideoeditor::model::Rational* release_sample_aspect_ratio();
  void set_allocated_sample_aspect_ratio(::whensunset::wsvideoeditor::model::Rational* sample_aspect_ratio);

  // optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
  bool has_guessed_frame_rate() const;
  void clear_guessed_frame_rate();
  static const int kGuessedFrameRateFieldNumber = 9;
  const ::whensunset::wsvideoeditor::model::Rational& guessed_frame_rate() const;
  ::whensunset::wsvideoeditor::model::Rational* mutable_guessed_frame_rate();
  ::whensunset::wsvideoeditor::model::Rational* release_guessed_frame_rate();
  void set_allocated_guessed_frame_rate(::whensunset::wsvideoeditor::model::Rational* guessed_frame_rate);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaStreamHolder)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr codec_type_;
  ::whensunset::wsvideoeditor::model::Rational* avg_frame_rate_;
  ::whensunset::wsvideoeditor::model::Rational* time_base_;
  ::google::protobuf::int64 duration_ts_;
  ::whensunset::wsvideoeditor::model::Rational* sample_aspect_ratio_;
  ::whensunset::wsvideoeditor::model::Rational* guessed_frame_rate_;
  ::google::protobuf::int32 rotation_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static MediaStreamHolder* default_instance_;
};
// -------------------------------------------------------------------

class MediaFileHolder : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.MediaFileHolder) */ {
 public:
  MediaFileHolder();
  virtual ~MediaFileHolder();

  MediaFileHolder(const MediaFileHolder& from);

  inline MediaFileHolder& operator=(const MediaFileHolder& from) {
    CopyFrom(from);
    return *this;
  }

  static const MediaFileHolder& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MediaFileHolder* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MediaFileHolder* other);

  // implements Message ----------------------------------------------

  inline MediaFileHolder* New() const { return New(NULL); }

  MediaFileHolder* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MediaFileHolder& from);
  void MergeFrom(const MediaFileHolder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaFileHolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string format_name = 2;
  void clear_format_name();
  static const int kFormatNameFieldNumber = 2;
  const ::std::string& format_name() const;
  void set_format_name(const ::std::string& value);
  void set_format_name(const char* value);
  void set_format_name(const char* value, size_t size);
  ::std::string* mutable_format_name();
  ::std::string* release_format_name();
  void set_allocated_format_name(::std::string* format_name);

  // optional int32 probe_score = 3;
  void clear_probe_score();
  static const int kProbeScoreFieldNumber = 3;
  ::google::protobuf::int32 probe_score() const;
  void set_probe_score(::google::protobuf::int32 value);

  // optional int32 num_streams = 4;
  void clear_num_streams();
  static const int kNumStreamsFieldNumber = 4;
  ::google::protobuf::int32 num_streams() const;
  void set_num_streams(::google::protobuf::int32 value);

  // repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 5;
  const ::whensunset::wsvideoeditor::model::MediaStreamHolder& streams(int index) const;
  ::whensunset::wsvideoeditor::model::MediaStreamHolder* mutable_streams(int index);
  ::whensunset::wsvideoeditor::model::MediaStreamHolder* add_streams();
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >*
      mutable_streams();
  const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >&
      streams() const;

  // optional int32 media_strema_index = 6;
  void clear_media_strema_index();
  static const int kMediaStremaIndexFieldNumber = 6;
  ::google::protobuf::int32 media_strema_index() const;
  void set_media_strema_index(::google::protobuf::int32 value);

  // optional int32 audio_strema_index = 7;
  void clear_audio_strema_index();
  static const int kAudioStremaIndexFieldNumber = 7;
  ::google::protobuf::int32 audio_strema_index() const;
  void set_audio_strema_index(::google::protobuf::int32 value);

  // optional double duration = 8;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  double duration() const;
  void set_duration(double value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaFileHolder)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr format_name_;
  ::google::protobuf::int32 probe_score_;
  ::google::protobuf::int32 num_streams_;
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder > streams_;
  ::google::protobuf::int32 media_strema_index_;
  ::google::protobuf::int32 audio_strema_index_;
  double duration_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static MediaFileHolder* default_instance_;
};
// -------------------------------------------------------------------

class MediaAsset : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.MediaAsset) */ {
 public:
  MediaAsset();
  virtual ~MediaAsset();

  MediaAsset(const MediaAsset& from);

  inline MediaAsset& operator=(const MediaAsset& from) {
    CopyFrom(from);
    return *this;
  }

  static const MediaAsset& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MediaAsset* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MediaAsset* other);

  // implements Message ----------------------------------------------

  inline MediaAsset* New() const { return New(NULL); }

  MediaAsset* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MediaAsset& from);
  void MergeFrom(const MediaAsset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 asset_id = 1;
  void clear_asset_id();
  static const int kAssetIdFieldNumber = 1;
  ::google::protobuf::uint64 asset_id() const;
  void set_asset_id(::google::protobuf::uint64 value);

  // optional string asset_path = 2;
  void clear_asset_path();
  static const int kAssetPathFieldNumber = 2;
  const ::std::string& asset_path() const;
  void set_asset_path(const ::std::string& value);
  void set_asset_path(const char* value);
  void set_asset_path(const char* value, size_t size);
  ::std::string* mutable_asset_path();
  ::std::string* release_asset_path();
  void set_allocated_asset_path(::std::string* asset_path);

  // optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
  bool has_media_asset_file_holder() const;
  void clear_media_asset_file_holder();
  static const int kMediaAssetFileHolderFieldNumber = 3;
  const ::whensunset::wsvideoeditor::model::MediaFileHolder& media_asset_file_holder() const;
  ::whensunset::wsvideoeditor::model::MediaFileHolder* mutable_media_asset_file_holder();
  ::whensunset::wsvideoeditor::model::MediaFileHolder* release_media_asset_file_holder();
  void set_allocated_media_asset_file_holder(::whensunset::wsvideoeditor::model::MediaFileHolder* media_asset_file_holder);

  // repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
  int clipped_time_range_size() const;
  void clear_clipped_time_range();
  static const int kClippedTimeRangeFieldNumber = 4;
  const ::whensunset::wsvideoeditor::model::TimeRange& clipped_time_range(int index) const;
  ::whensunset::wsvideoeditor::model::TimeRange* mutable_clipped_time_range(int index);
  ::whensunset::wsvideoeditor::model::TimeRange* add_clipped_time_range();
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >*
      mutable_clipped_time_range();
  const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >&
      clipped_time_range() const;

  // optional double volume = 5;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  double volume() const;
  void set_volume(double value);

  // optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
  void clear_media_asset_scale_type();
  static const int kMediaAssetScaleTypeFieldNumber = 6;
  ::whensunset::wsvideoeditor::model::MediaAssetScaleType media_asset_scale_type() const;
  void set_media_asset_scale_type(::whensunset::wsvideoeditor::model::MediaAssetScaleType value);

  // optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
  void clear_alpha_info();
  static const int kAlphaInfoFieldNumber = 7;
  ::whensunset::wsvideoeditor::model::YuvAlphaType alpha_info() const;
  void set_alpha_info(::whensunset::wsvideoeditor::model::YuvAlphaType value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaAsset)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 asset_id_;
  ::google::protobuf::internal::ArenaStringPtr asset_path_;
  ::whensunset::wsvideoeditor::model::MediaFileHolder* media_asset_file_holder_;
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange > clipped_time_range_;
  double volume_;
  int media_asset_scale_type_;
  int alpha_info_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static MediaAsset* default_instance_;
};
// -------------------------------------------------------------------

class EditorProjectPrivateData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.EditorProjectPrivateData) */ {
 public:
  EditorProjectPrivateData();
  virtual ~EditorProjectPrivateData();

  EditorProjectPrivateData(const EditorProjectPrivateData& from);

  inline EditorProjectPrivateData& operator=(const EditorProjectPrivateData& from) {
    CopyFrom(from);
    return *this;
  }

  static const EditorProjectPrivateData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EditorProjectPrivateData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EditorProjectPrivateData* other);

  // implements Message ----------------------------------------------

  inline EditorProjectPrivateData* New() const { return New(NULL); }

  EditorProjectPrivateData* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EditorProjectPrivateData& from);
  void MergeFrom(const EditorProjectPrivateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EditorProjectPrivateData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 project_width = 1;
  void clear_project_width();
  static const int kProjectWidthFieldNumber = 1;
  ::google::protobuf::int32 project_width() const;
  void set_project_width(::google::protobuf::int32 value);

  // optional int32 project_height = 2;
  void clear_project_height();
  static const int kProjectHeightFieldNumber = 2;
  ::google::protobuf::int32 project_height() const;
  void set_project_height(::google::protobuf::int32 value);

  // optional double project_fps = 3;
  void clear_project_fps();
  static const int kProjectFpsFieldNumber = 3;
  double project_fps() const;
  void set_project_fps(double value);

  // optional double project_duration = 4;
  void clear_project_duration();
  static const int kProjectDurationFieldNumber = 4;
  double project_duration() const;
  void set_project_duration(double value);

  // optional int32 input_media_assets_number = 5;
  void clear_input_media_assets_number();
  static const int kInputMediaAssetsNumberFieldNumber = 5;
  ::google::protobuf::int32 input_media_assets_number() const;
  void set_input_media_assets_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 project_width_;
  ::google::protobuf::int32 project_height_;
  double project_fps_;
  double project_duration_;
  ::google::protobuf::int32 input_media_assets_number_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static EditorProjectPrivateData* default_instance_;
};
// -------------------------------------------------------------------

class EditorProject : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.wsvideoeditor.model.EditorProject) */ {
 public:
  EditorProject();
  virtual ~EditorProject();

  EditorProject(const EditorProject& from);

  inline EditorProject& operator=(const EditorProject& from) {
    CopyFrom(from);
    return *this;
  }

  static const EditorProject& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EditorProject* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EditorProject* other);

  // implements Message ----------------------------------------------

  inline EditorProject* New() const { return New(NULL); }

  EditorProject* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EditorProject& from);
  void MergeFrom(const EditorProject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EditorProject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  ::google::protobuf::int64 project_id() const;
  void set_project_id(::google::protobuf::int64 value);

  // repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
  int media_asset_size() const;
  void clear_media_asset();
  static const int kMediaAssetFieldNumber = 2;
  const ::whensunset::wsvideoeditor::model::MediaAsset& media_asset(int index) const;
  ::whensunset::wsvideoeditor::model::MediaAsset* mutable_media_asset(int index);
  ::whensunset::wsvideoeditor::model::MediaAsset* add_media_asset();
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >*
      mutable_media_asset();
  const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >&
      media_asset() const;

  // optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
  bool has_private_data() const;
  void clear_private_data();
  static const int kPrivateDataFieldNumber = 3;
  const ::whensunset::wsvideoeditor::model::EditorProjectPrivateData& private_data() const;
  ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* mutable_private_data();
  ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* release_private_data();
  void set_allocated_private_data(::whensunset::wsvideoeditor::model::EditorProjectPrivateData* private_data);

  // optional bool blur_padding_area = 4;
  void clear_blur_padding_area();
  static const int kBlurPaddingAreaFieldNumber = 4;
  bool blur_padding_area() const;
  void set_blur_padding_area(bool value);

  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.EditorProject)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int64 project_id_;
  ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset > media_asset_;
  ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* private_data_;
  bool blur_padding_area_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  #endif
  friend void protobuf_AssignDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static EditorProject* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Rational

// optional int64 num = 1;
inline void Rational::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Rational::num() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.Rational.num)
  return num_;
}
inline void Rational::set_num(::google::protobuf::int64 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.Rational.num)
}

// optional int64 den = 2;
inline void Rational::clear_den() {
  den_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Rational::den() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.Rational.den)
  return den_;
}
inline void Rational::set_den(::google::protobuf::int64 value) {
  
  den_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.Rational.den)
}

// -------------------------------------------------------------------

// TimeRange

// optional double start = 1;
inline void TimeRange::clear_start() {
  start_ = 0;
}
inline double TimeRange::start() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.start)
  return start_;
}
inline void TimeRange::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.start)
}

// optional double duration = 2;
inline void TimeRange::clear_duration() {
  duration_ = 0;
}
inline double TimeRange::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.duration)
  return duration_;
}
inline void TimeRange::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.duration)
}

// optional uint64 id = 3;
inline void TimeRange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeRange::id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.id)
  return id_;
}
inline void TimeRange::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.id)
}

// -------------------------------------------------------------------

// MediaStreamHolder

// optional int32 width = 1;
inline void MediaStreamHolder::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::width() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.width)
  return width_;
}
inline void MediaStreamHolder::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.width)
}

// optional int32 height = 2;
inline void MediaStreamHolder::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::height() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.height)
  return height_;
}
inline void MediaStreamHolder::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.height)
}

// optional string codec_type = 3;
inline void MediaStreamHolder::clear_codec_type() {
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaStreamHolder::codec_type() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  return codec_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaStreamHolder::set_codec_type(const ::std::string& value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
inline void MediaStreamHolder::set_codec_type(const char* value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
inline void MediaStreamHolder::set_codec_type(const char* value, size_t size) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
inline ::std::string* MediaStreamHolder::mutable_codec_type() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  return codec_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaStreamHolder::release_codec_type() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  
  return codec_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaStreamHolder::set_allocated_codec_type(::std::string* codec_type) {
  if (codec_type != NULL) {
    
  } else {
    
  }
  codec_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec_type);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}

// optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
inline bool MediaStreamHolder::has_avg_frame_rate() const {
  return !_is_default_instance_ && avg_frame_rate_ != NULL;
}
inline void MediaStreamHolder::clear_avg_frame_rate() {
  if (GetArenaNoVirtual() == NULL && avg_frame_rate_ != NULL) delete avg_frame_rate_;
  avg_frame_rate_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::avg_frame_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avg_frame_rate_ != NULL ? *avg_frame_rate_ : *default_instance().avg_frame_rate_;
#else
  return avg_frame_rate_ != NULL ? *avg_frame_rate_ : *default_instance_->avg_frame_rate_;
#endif
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_avg_frame_rate() {
  
  if (avg_frame_rate_ == NULL) {
    avg_frame_rate_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
  return avg_frame_rate_;
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_avg_frame_rate() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = avg_frame_rate_;
  avg_frame_rate_ = NULL;
  return temp;
}
inline void MediaStreamHolder::set_allocated_avg_frame_rate(::whensunset::wsvideoeditor::model::Rational* avg_frame_rate) {
  delete avg_frame_rate_;
  avg_frame_rate_ = avg_frame_rate;
  if (avg_frame_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
}

// optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
inline bool MediaStreamHolder::has_time_base() const {
  return !_is_default_instance_ && time_base_ != NULL;
}
inline void MediaStreamHolder::clear_time_base() {
  if (GetArenaNoVirtual() == NULL && time_base_ != NULL) delete time_base_;
  time_base_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::time_base() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_base_ != NULL ? *time_base_ : *default_instance().time_base_;
#else
  return time_base_ != NULL ? *time_base_ : *default_instance_->time_base_;
#endif
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_time_base() {
  
  if (time_base_ == NULL) {
    time_base_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
  return time_base_;
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_time_base() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = time_base_;
  time_base_ = NULL;
  return temp;
}
inline void MediaStreamHolder::set_allocated_time_base(::whensunset::wsvideoeditor::model::Rational* time_base) {
  delete time_base_;
  time_base_ = time_base;
  if (time_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
}

// optional int64 duration_ts = 6;
inline void MediaStreamHolder::clear_duration_ts() {
  duration_ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MediaStreamHolder::duration_ts() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.duration_ts)
  return duration_ts_;
}
inline void MediaStreamHolder::set_duration_ts(::google::protobuf::int64 value) {
  
  duration_ts_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.duration_ts)
}

// optional int32 rotation = 7;
inline void MediaStreamHolder::clear_rotation() {
  rotation_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::rotation() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.rotation)
  return rotation_;
}
inline void MediaStreamHolder::set_rotation(::google::protobuf::int32 value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.rotation)
}

// optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
inline bool MediaStreamHolder::has_sample_aspect_ratio() const {
  return !_is_default_instance_ && sample_aspect_ratio_ != NULL;
}
inline void MediaStreamHolder::clear_sample_aspect_ratio() {
  if (GetArenaNoVirtual() == NULL && sample_aspect_ratio_ != NULL) delete sample_aspect_ratio_;
  sample_aspect_ratio_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::sample_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sample_aspect_ratio_ != NULL ? *sample_aspect_ratio_ : *default_instance().sample_aspect_ratio_;
#else
  return sample_aspect_ratio_ != NULL ? *sample_aspect_ratio_ : *default_instance_->sample_aspect_ratio_;
#endif
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_sample_aspect_ratio() {
  
  if (sample_aspect_ratio_ == NULL) {
    sample_aspect_ratio_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
  return sample_aspect_ratio_;
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_sample_aspect_ratio() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = sample_aspect_ratio_;
  sample_aspect_ratio_ = NULL;
  return temp;
}
inline void MediaStreamHolder::set_allocated_sample_aspect_ratio(::whensunset::wsvideoeditor::model::Rational* sample_aspect_ratio) {
  delete sample_aspect_ratio_;
  sample_aspect_ratio_ = sample_aspect_ratio;
  if (sample_aspect_ratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
}

// optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
inline bool MediaStreamHolder::has_guessed_frame_rate() const {
  return !_is_default_instance_ && guessed_frame_rate_ != NULL;
}
inline void MediaStreamHolder::clear_guessed_frame_rate() {
  if (GetArenaNoVirtual() == NULL && guessed_frame_rate_ != NULL) delete guessed_frame_rate_;
  guessed_frame_rate_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::guessed_frame_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return guessed_frame_rate_ != NULL ? *guessed_frame_rate_ : *default_instance().guessed_frame_rate_;
#else
  return guessed_frame_rate_ != NULL ? *guessed_frame_rate_ : *default_instance_->guessed_frame_rate_;
#endif
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_guessed_frame_rate() {
  
  if (guessed_frame_rate_ == NULL) {
    guessed_frame_rate_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
  return guessed_frame_rate_;
}
inline ::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_guessed_frame_rate() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = guessed_frame_rate_;
  guessed_frame_rate_ = NULL;
  return temp;
}
inline void MediaStreamHolder::set_allocated_guessed_frame_rate(::whensunset::wsvideoeditor::model::Rational* guessed_frame_rate) {
  delete guessed_frame_rate_;
  guessed_frame_rate_ = guessed_frame_rate;
  if (guessed_frame_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
}

// -------------------------------------------------------------------

// MediaFileHolder

// optional string path = 1;
inline void MediaFileHolder::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaFileHolder::path() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaFileHolder::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
inline void MediaFileHolder::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
inline void MediaFileHolder::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
inline ::std::string* MediaFileHolder::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaFileHolder::release_path() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaFileHolder::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}

// optional string format_name = 2;
inline void MediaFileHolder::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaFileHolder::format_name() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  return format_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaFileHolder::set_format_name(const ::std::string& value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
inline void MediaFileHolder::set_format_name(const char* value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
inline void MediaFileHolder::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
inline ::std::string* MediaFileHolder::mutable_format_name() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  return format_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaFileHolder::release_format_name() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  
  return format_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaFileHolder::set_allocated_format_name(::std::string* format_name) {
  if (format_name != NULL) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}

// optional int32 probe_score = 3;
inline void MediaFileHolder::clear_probe_score() {
  probe_score_ = 0;
}
inline ::google::protobuf::int32 MediaFileHolder::probe_score() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.probe_score)
  return probe_score_;
}
inline void MediaFileHolder::set_probe_score(::google::protobuf::int32 value) {
  
  probe_score_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.probe_score)
}

// optional int32 num_streams = 4;
inline void MediaFileHolder::clear_num_streams() {
  num_streams_ = 0;
}
inline ::google::protobuf::int32 MediaFileHolder::num_streams() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.num_streams)
  return num_streams_;
}
inline void MediaFileHolder::set_num_streams(::google::protobuf::int32 value) {
  
  num_streams_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.num_streams)
}

// repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
inline int MediaFileHolder::streams_size() const {
  return streams_.size();
}
inline void MediaFileHolder::clear_streams() {
  streams_.Clear();
}
inline const ::whensunset::wsvideoeditor::model::MediaStreamHolder& MediaFileHolder::streams(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Get(index);
}
inline ::whensunset::wsvideoeditor::model::MediaStreamHolder* MediaFileHolder::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Mutable(index);
}
inline ::whensunset::wsvideoeditor::model::MediaStreamHolder* MediaFileHolder::add_streams() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >*
MediaFileHolder::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return &streams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >&
MediaFileHolder::streams() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_;
}

// optional int32 media_strema_index = 6;
inline void MediaFileHolder::clear_media_strema_index() {
  media_strema_index_ = 0;
}
inline ::google::protobuf::int32 MediaFileHolder::media_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.media_strema_index)
  return media_strema_index_;
}
inline void MediaFileHolder::set_media_strema_index(::google::protobuf::int32 value) {
  
  media_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.media_strema_index)
}

// optional int32 audio_strema_index = 7;
inline void MediaFileHolder::clear_audio_strema_index() {
  audio_strema_index_ = 0;
}
inline ::google::protobuf::int32 MediaFileHolder::audio_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.audio_strema_index)
  return audio_strema_index_;
}
inline void MediaFileHolder::set_audio_strema_index(::google::protobuf::int32 value) {
  
  audio_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.audio_strema_index)
}

// optional double duration = 8;
inline void MediaFileHolder::clear_duration() {
  duration_ = 0;
}
inline double MediaFileHolder::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.duration)
  return duration_;
}
inline void MediaFileHolder::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.duration)
}

// -------------------------------------------------------------------

// MediaAsset

// optional uint64 asset_id = 1;
inline void MediaAsset::clear_asset_id() {
  asset_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MediaAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.asset_id)
  return asset_id_;
}
inline void MediaAsset::set_asset_id(::google::protobuf::uint64 value) {
  
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.asset_id)
}

// optional string asset_path = 2;
inline void MediaAsset::clear_asset_path() {
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaAsset::asset_path() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  return asset_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaAsset::set_asset_path(const ::std::string& value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
inline void MediaAsset::set_asset_path(const char* value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
inline void MediaAsset::set_asset_path(const char* value, size_t size) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
inline ::std::string* MediaAsset::mutable_asset_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  return asset_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaAsset::release_asset_path() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  
  return asset_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaAsset::set_allocated_asset_path(::std::string* asset_path) {
  if (asset_path != NULL) {
    
  } else {
    
  }
  asset_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}

// optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
inline bool MediaAsset::has_media_asset_file_holder() const {
  return !_is_default_instance_ && media_asset_file_holder_ != NULL;
}
inline void MediaAsset::clear_media_asset_file_holder() {
  if (GetArenaNoVirtual() == NULL && media_asset_file_holder_ != NULL) delete media_asset_file_holder_;
  media_asset_file_holder_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::MediaFileHolder& MediaAsset::media_asset_file_holder() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return media_asset_file_holder_ != NULL ? *media_asset_file_holder_ : *default_instance().media_asset_file_holder_;
#else
  return media_asset_file_holder_ != NULL ? *media_asset_file_holder_ : *default_instance_->media_asset_file_holder_;
#endif
}
inline ::whensunset::wsvideoeditor::model::MediaFileHolder* MediaAsset::mutable_media_asset_file_holder() {
  
  if (media_asset_file_holder_ == NULL) {
    media_asset_file_holder_ = new ::whensunset::wsvideoeditor::model::MediaFileHolder;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
  return media_asset_file_holder_;
}
inline ::whensunset::wsvideoeditor::model::MediaFileHolder* MediaAsset::release_media_asset_file_holder() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
  
  ::whensunset::wsvideoeditor::model::MediaFileHolder* temp = media_asset_file_holder_;
  media_asset_file_holder_ = NULL;
  return temp;
}
inline void MediaAsset::set_allocated_media_asset_file_holder(::whensunset::wsvideoeditor::model::MediaFileHolder* media_asset_file_holder) {
  delete media_asset_file_holder_;
  media_asset_file_holder_ = media_asset_file_holder;
  if (media_asset_file_holder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
}

// repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
inline int MediaAsset::clipped_time_range_size() const {
  return clipped_time_range_.size();
}
inline void MediaAsset::clear_clipped_time_range() {
  clipped_time_range_.Clear();
}
inline const ::whensunset::wsvideoeditor::model::TimeRange& MediaAsset::clipped_time_range(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Get(index);
}
inline ::whensunset::wsvideoeditor::model::TimeRange* MediaAsset::mutable_clipped_time_range(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Mutable(index);
}
inline ::whensunset::wsvideoeditor::model::TimeRange* MediaAsset::add_clipped_time_range() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >*
MediaAsset::mutable_clipped_time_range() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return &clipped_time_range_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >&
MediaAsset::clipped_time_range() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_;
}

// optional double volume = 5;
inline void MediaAsset::clear_volume() {
  volume_ = 0;
}
inline double MediaAsset::volume() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.volume)
  return volume_;
}
inline void MediaAsset::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.volume)
}

// optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
inline void MediaAsset::clear_media_asset_scale_type() {
  media_asset_scale_type_ = 0;
}
inline ::whensunset::wsvideoeditor::model::MediaAssetScaleType MediaAsset::media_asset_scale_type() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.media_asset_scale_type)
  return static_cast< ::whensunset::wsvideoeditor::model::MediaAssetScaleType >(media_asset_scale_type_);
}
inline void MediaAsset::set_media_asset_scale_type(::whensunset::wsvideoeditor::model::MediaAssetScaleType value) {
  
  media_asset_scale_type_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.media_asset_scale_type)
}

// optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
inline void MediaAsset::clear_alpha_info() {
  alpha_info_ = 0;
}
inline ::whensunset::wsvideoeditor::model::YuvAlphaType MediaAsset::alpha_info() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.alpha_info)
  return static_cast< ::whensunset::wsvideoeditor::model::YuvAlphaType >(alpha_info_);
}
inline void MediaAsset::set_alpha_info(::whensunset::wsvideoeditor::model::YuvAlphaType value) {
  
  alpha_info_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.alpha_info)
}

// -------------------------------------------------------------------

// EditorProjectPrivateData

// optional int32 project_width = 1;
inline void EditorProjectPrivateData::clear_project_width() {
  project_width_ = 0;
}
inline ::google::protobuf::int32 EditorProjectPrivateData::project_width() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_width)
  return project_width_;
}
inline void EditorProjectPrivateData::set_project_width(::google::protobuf::int32 value) {
  
  project_width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_width)
}

// optional int32 project_height = 2;
inline void EditorProjectPrivateData::clear_project_height() {
  project_height_ = 0;
}
inline ::google::protobuf::int32 EditorProjectPrivateData::project_height() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_height)
  return project_height_;
}
inline void EditorProjectPrivateData::set_project_height(::google::protobuf::int32 value) {
  
  project_height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_height)
}

// optional double project_fps = 3;
inline void EditorProjectPrivateData::clear_project_fps() {
  project_fps_ = 0;
}
inline double EditorProjectPrivateData::project_fps() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_fps)
  return project_fps_;
}
inline void EditorProjectPrivateData::set_project_fps(double value) {
  
  project_fps_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_fps)
}

// optional double project_duration = 4;
inline void EditorProjectPrivateData::clear_project_duration() {
  project_duration_ = 0;
}
inline double EditorProjectPrivateData::project_duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_duration)
  return project_duration_;
}
inline void EditorProjectPrivateData::set_project_duration(double value) {
  
  project_duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_duration)
}

// optional int32 input_media_assets_number = 5;
inline void EditorProjectPrivateData::clear_input_media_assets_number() {
  input_media_assets_number_ = 0;
}
inline ::google::protobuf::int32 EditorProjectPrivateData::input_media_assets_number() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.input_media_assets_number)
  return input_media_assets_number_;
}
inline void EditorProjectPrivateData::set_input_media_assets_number(::google::protobuf::int32 value) {
  
  input_media_assets_number_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.input_media_assets_number)
}

// -------------------------------------------------------------------

// EditorProject

// optional int64 project_id = 1;
inline void EditorProject::clear_project_id() {
  project_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EditorProject::project_id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.project_id)
  return project_id_;
}
inline void EditorProject::set_project_id(::google::protobuf::int64 value) {
  
  project_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProject.project_id)
}

// repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
inline int EditorProject::media_asset_size() const {
  return media_asset_.size();
}
inline void EditorProject::clear_media_asset() {
  media_asset_.Clear();
}
inline const ::whensunset::wsvideoeditor::model::MediaAsset& EditorProject::media_asset(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Get(index);
}
inline ::whensunset::wsvideoeditor::model::MediaAsset* EditorProject::mutable_media_asset(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Mutable(index);
}
inline ::whensunset::wsvideoeditor::model::MediaAsset* EditorProject::add_media_asset() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >*
EditorProject::mutable_media_asset() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return &media_asset_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >&
EditorProject::media_asset() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_;
}

// optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
inline bool EditorProject::has_private_data() const {
  return !_is_default_instance_ && private_data_ != NULL;
}
inline void EditorProject::clear_private_data() {
  if (GetArenaNoVirtual() == NULL && private_data_ != NULL) delete private_data_;
  private_data_ = NULL;
}
inline const ::whensunset::wsvideoeditor::model::EditorProjectPrivateData& EditorProject::private_data() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.private_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return private_data_ != NULL ? *private_data_ : *default_instance().private_data_;
#else
  return private_data_ != NULL ? *private_data_ : *default_instance_->private_data_;
#endif
}
inline ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* EditorProject::mutable_private_data() {
  
  if (private_data_ == NULL) {
    private_data_ = new ::whensunset::wsvideoeditor::model::EditorProjectPrivateData;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.EditorProject.private_data)
  return private_data_;
}
inline ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* EditorProject::release_private_data() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.EditorProject.private_data)
  
  ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* temp = private_data_;
  private_data_ = NULL;
  return temp;
}
inline void EditorProject::set_allocated_private_data(::whensunset::wsvideoeditor::model::EditorProjectPrivateData* private_data) {
  delete private_data_;
  private_data_ = private_data;
  if (private_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.EditorProject.private_data)
}

// optional bool blur_padding_area = 4;
inline void EditorProject::clear_blur_padding_area() {
  blur_padding_area_ = false;
}
inline bool EditorProject::blur_padding_area() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.blur_padding_area)
  return blur_padding_area_;
}
inline void EditorProject::set_blur_padding_area(bool value) {
  
  blur_padding_area_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProject.blur_padding_area)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace wsvideoeditor
}  // namespace whensunset

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::whensunset::wsvideoeditor::model::MediaAssetScaleType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::whensunset::wsvideoeditor::model::YuvAlphaType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ws_5fvideo_5feditor_5fsdk_2eproto__INCLUDED
