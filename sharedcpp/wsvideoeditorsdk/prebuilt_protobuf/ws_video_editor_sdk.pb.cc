// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_video_editor_sdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ws_video_editor_sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace whensunset {
namespace wsvideoeditor {
namespace model {

void protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto() {
  delete Rational::default_instance_;
  delete TimeRange::default_instance_;
  delete MediaStreamHolder::default_instance_;
  delete MediaFileHolder::default_instance_;
  delete MediaAsset::default_instance_;
  delete EditorProjectPrivateData::default_instance_;
  delete EditorProject::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Rational::default_instance_ = new Rational();
  TimeRange::default_instance_ = new TimeRange();
  MediaStreamHolder::default_instance_ = new MediaStreamHolder();
  MediaFileHolder::default_instance_ = new MediaFileHolder();
  MediaAsset::default_instance_ = new MediaAsset();
  EditorProjectPrivateData::default_instance_ = new EditorProjectPrivateData();
  EditorProject::default_instance_ = new EditorProject();
  Rational::default_instance_->InitAsDefaultInstance();
  TimeRange::default_instance_->InitAsDefaultInstance();
  MediaStreamHolder::default_instance_->InitAsDefaultInstance();
  MediaFileHolder::default_instance_->InitAsDefaultInstance();
  MediaAsset::default_instance_->InitAsDefaultInstance();
  EditorProjectPrivateData::default_instance_->InitAsDefaultInstance();
  EditorProject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ws_5fvideo_5feditor_5fsdk_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_once_);
void protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_once_,
                 &protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ws_5fvideo_5feditor_5fsdk_2eproto {
  StaticDescriptorInitializer_ws_5fvideo_5feditor_5fsdk_2eproto() {
    protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
  }
} static_descriptor_initializer_ws_5fvideo_5feditor_5fsdk_2eproto_;
#endif
bool MediaAssetScaleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool YuvAlphaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rational::kNumFieldNumber;
const int Rational::kDenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rational::Rational()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.Rational)
}

void Rational::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rational::Rational(const Rational& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.Rational)
}

void Rational::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  den_ = GOOGLE_LONGLONG(0);
}

Rational::~Rational() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.Rational)
  SharedDtor();
}

void Rational::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Rational::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Rational& Rational::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

Rational* Rational::default_instance_ = NULL;

Rational* Rational::New(::google::protobuf::Arena* arena) const {
  Rational* n = new Rational;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rational::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.Rational)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rational, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rational*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_, den_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rational::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.Rational)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_den;
        break;
      }

      // optional int64 den = 2;
      case 2: {
        if (tag == 16) {
         parse_den:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &den_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.Rational)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.Rational)
  return false;
#undef DO_
}

void Rational::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.Rational)
  // optional int64 num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num(), output);
  }

  // optional int64 den = 2;
  if (this->den() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->den(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.Rational)
}

int Rational::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.Rational)
  int total_size = 0;

  // optional int64 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num());
  }

  // optional int64 den = 2;
  if (this->den() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->den());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rational::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rational*>(&from));
}

void Rational::MergeFrom(const Rational& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.Rational)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.den() != 0) {
    set_den(from.den());
  }
}

void Rational::CopyFrom(const Rational& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.Rational)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rational::IsInitialized() const {

  return true;
}

void Rational::Swap(Rational* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rational::InternalSwap(Rational* other) {
  std::swap(num_, other->num_);
  std::swap(den_, other->den_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Rational::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.Rational";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rational

// optional int64 num = 1;
void Rational::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Rational::num() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.Rational.num)
  return num_;
}
 void Rational::set_num(::google::protobuf::int64 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.Rational.num)
}

// optional int64 den = 2;
void Rational::clear_den() {
  den_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Rational::den() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.Rational.den)
  return den_;
}
 void Rational::set_den(::google::protobuf::int64 value) {
  
  den_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.Rational.den)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kStartFieldNumber;
const int TimeRange::kDurationFieldNumber;
const int TimeRange::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.TimeRange)
}

void TimeRange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.TimeRange)
}

void TimeRange::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ = 0;
  duration_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeRange& TimeRange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

TimeRange* TimeRange::default_instance_ = NULL;

TimeRange* TimeRange::New(::google::protobuf::Arena* arena) const {
  TimeRange* n = new TimeRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.TimeRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.TimeRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // optional double duration = 2;
      case 2: {
        if (tag == 17) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.TimeRange)
  return false;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.TimeRange)
  // optional double start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // optional double duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.TimeRange)
}

int TimeRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.TimeRange)
  int total_size = 0;

  // optional double start = 1;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // optional double duration = 2;
  if (this->duration() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeRange*>(&from));
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.TimeRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  std::swap(start_, other->start_);
  std::swap(duration_, other->duration_);
  std::swap(id_, other->id_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimeRange::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.TimeRange";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRange

// optional double start = 1;
void TimeRange::clear_start() {
  start_ = 0;
}
 double TimeRange::start() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.start)
  return start_;
}
 void TimeRange::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.start)
}

// optional double duration = 2;
void TimeRange::clear_duration() {
  duration_ = 0;
}
 double TimeRange::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.duration)
  return duration_;
}
 void TimeRange::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.duration)
}

// optional uint64 id = 3;
void TimeRange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimeRange::id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.TimeRange.id)
  return id_;
}
 void TimeRange::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.TimeRange.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaStreamHolder::kWidthFieldNumber;
const int MediaStreamHolder::kHeightFieldNumber;
const int MediaStreamHolder::kCodecTypeFieldNumber;
const int MediaStreamHolder::kAvgFrameRateFieldNumber;
const int MediaStreamHolder::kTimeBaseFieldNumber;
const int MediaStreamHolder::kDurationTsFieldNumber;
const int MediaStreamHolder::kRotationFieldNumber;
const int MediaStreamHolder::kSampleAspectRatioFieldNumber;
const int MediaStreamHolder::kGuessedFrameRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaStreamHolder::MediaStreamHolder()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.MediaStreamHolder)
}

void MediaStreamHolder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  avg_frame_rate_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(
      ::whensunset::wsvideoeditor::model::Rational::internal_default_instance());
#else
  avg_frame_rate_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(&::whensunset::wsvideoeditor::model::Rational::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_base_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(
      ::whensunset::wsvideoeditor::model::Rational::internal_default_instance());
#else
  time_base_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(&::whensunset::wsvideoeditor::model::Rational::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sample_aspect_ratio_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(
      ::whensunset::wsvideoeditor::model::Rational::internal_default_instance());
#else
  sample_aspect_ratio_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(&::whensunset::wsvideoeditor::model::Rational::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guessed_frame_rate_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(
      ::whensunset::wsvideoeditor::model::Rational::internal_default_instance());
#else
  guessed_frame_rate_ = const_cast< ::whensunset::wsvideoeditor::model::Rational*>(&::whensunset::wsvideoeditor::model::Rational::default_instance());
#endif
}

MediaStreamHolder::MediaStreamHolder(const MediaStreamHolder& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.MediaStreamHolder)
}

void MediaStreamHolder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  codec_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avg_frame_rate_ = NULL;
  time_base_ = NULL;
  duration_ts_ = GOOGLE_LONGLONG(0);
  rotation_ = 0;
  sample_aspect_ratio_ = NULL;
  guessed_frame_rate_ = NULL;
}

MediaStreamHolder::~MediaStreamHolder() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.MediaStreamHolder)
  SharedDtor();
}

void MediaStreamHolder::SharedDtor() {
  codec_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete avg_frame_rate_;
    delete time_base_;
    delete sample_aspect_ratio_;
    delete guessed_frame_rate_;
  }
}

void MediaStreamHolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MediaStreamHolder& MediaStreamHolder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

MediaStreamHolder* MediaStreamHolder::default_instance_ = NULL;

MediaStreamHolder* MediaStreamHolder::New(::google::protobuf::Arena* arena) const {
  MediaStreamHolder* n = new MediaStreamHolder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaStreamHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaStreamHolder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaStreamHolder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && avg_frame_rate_ != NULL) delete avg_frame_rate_;
  avg_frame_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_base_ != NULL) delete time_base_;
  time_base_ = NULL;
  duration_ts_ = GOOGLE_LONGLONG(0);
  rotation_ = 0;
  if (GetArenaNoVirtual() == NULL && sample_aspect_ratio_ != NULL) delete sample_aspect_ratio_;
  sample_aspect_ratio_ = NULL;
  if (GetArenaNoVirtual() == NULL && guessed_frame_rate_ != NULL) delete guessed_frame_rate_;
  guessed_frame_rate_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MediaStreamHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_codec_type;
        break;
      }

      // optional string codec_type = 3;
      case 3: {
        if (tag == 26) {
         parse_codec_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codec_type().data(), this->codec_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avg_frame_rate;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
      case 4: {
        if (tag == 34) {
         parse_avg_frame_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avg_frame_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_time_base;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
      case 5: {
        if (tag == 42) {
         parse_time_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_duration_ts;
        break;
      }

      // optional int64 duration_ts = 6;
      case 6: {
        if (tag == 48) {
         parse_duration_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rotation;
        break;
      }

      // optional int32 rotation = 7;
      case 7: {
        if (tag == 56) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sample_aspect_ratio;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
      case 8: {
        if (tag == 66) {
         parse_sample_aspect_ratio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sample_aspect_ratio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_guessed_frame_rate;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
      case 9: {
        if (tag == 74) {
         parse_guessed_frame_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guessed_frame_rate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.MediaStreamHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.MediaStreamHolder)
  return false;
#undef DO_
}

void MediaStreamHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional string codec_type = 3;
  if (this->codec_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codec_type().data(), this->codec_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->codec_type(), output);
  }

  // optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
  if (this->has_avg_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->avg_frame_rate_, output);
  }

  // optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
  if (this->has_time_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->time_base_, output);
  }

  // optional int64 duration_ts = 6;
  if (this->duration_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->duration_ts(), output);
  }

  // optional int32 rotation = 7;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rotation(), output);
  }

  // optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
  if (this->has_sample_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->sample_aspect_ratio_, output);
  }

  // optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
  if (this->has_guessed_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->guessed_frame_rate_, output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.MediaStreamHolder)
}

int MediaStreamHolder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string codec_type = 3;
  if (this->codec_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codec_type());
  }

  // optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
  if (this->has_avg_frame_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avg_frame_rate_);
  }

  // optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
  if (this->has_time_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_base_);
  }

  // optional int64 duration_ts = 6;
  if (this->duration_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration_ts());
  }

  // optional int32 rotation = 7;
  if (this->rotation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rotation());
  }

  // optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
  if (this->has_sample_aspect_ratio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sample_aspect_ratio_);
  }

  // optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
  if (this->has_guessed_frame_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guessed_frame_rate_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaStreamHolder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MediaStreamHolder*>(&from));
}

void MediaStreamHolder::MergeFrom(const MediaStreamHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.codec_type().size() > 0) {

    codec_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_type_);
  }
  if (from.has_avg_frame_rate()) {
    mutable_avg_frame_rate()->::whensunset::wsvideoeditor::model::Rational::MergeFrom(from.avg_frame_rate());
  }
  if (from.has_time_base()) {
    mutable_time_base()->::whensunset::wsvideoeditor::model::Rational::MergeFrom(from.time_base());
  }
  if (from.duration_ts() != 0) {
    set_duration_ts(from.duration_ts());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
  if (from.has_sample_aspect_ratio()) {
    mutable_sample_aspect_ratio()->::whensunset::wsvideoeditor::model::Rational::MergeFrom(from.sample_aspect_ratio());
  }
  if (from.has_guessed_frame_rate()) {
    mutable_guessed_frame_rate()->::whensunset::wsvideoeditor::model::Rational::MergeFrom(from.guessed_frame_rate());
  }
}

void MediaStreamHolder::CopyFrom(const MediaStreamHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.MediaStreamHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStreamHolder::IsInitialized() const {

  return true;
}

void MediaStreamHolder::Swap(MediaStreamHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaStreamHolder::InternalSwap(MediaStreamHolder* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  codec_type_.Swap(&other->codec_type_);
  std::swap(avg_frame_rate_, other->avg_frame_rate_);
  std::swap(time_base_, other->time_base_);
  std::swap(duration_ts_, other->duration_ts_);
  std::swap(rotation_, other->rotation_);
  std::swap(sample_aspect_ratio_, other->sample_aspect_ratio_);
  std::swap(guessed_frame_rate_, other->guessed_frame_rate_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MediaStreamHolder::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.MediaStreamHolder";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaStreamHolder

// optional int32 width = 1;
void MediaStreamHolder::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::width() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.width)
  return width_;
}
 void MediaStreamHolder::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.width)
}

// optional int32 height = 2;
void MediaStreamHolder::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::height() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.height)
  return height_;
}
 void MediaStreamHolder::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.height)
}

// optional string codec_type = 3;
void MediaStreamHolder::clear_codec_type() {
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MediaStreamHolder::codec_type() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  return codec_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaStreamHolder::set_codec_type(const ::std::string& value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
 void MediaStreamHolder::set_codec_type(const char* value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
 void MediaStreamHolder::set_codec_type(const char* value, size_t size) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}
 ::std::string* MediaStreamHolder::mutable_codec_type() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  return codec_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaStreamHolder::release_codec_type() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
  
  return codec_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaStreamHolder::set_allocated_codec_type(::std::string* codec_type) {
  if (codec_type != NULL) {
    
  } else {
    
  }
  codec_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec_type);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.codec_type)
}

// optional .whensunset.wsvideoeditor.model.Rational avg_frame_rate = 4;
bool MediaStreamHolder::has_avg_frame_rate() const {
  return !_is_default_instance_ && avg_frame_rate_ != NULL;
}
void MediaStreamHolder::clear_avg_frame_rate() {
  if (GetArenaNoVirtual() == NULL && avg_frame_rate_ != NULL) delete avg_frame_rate_;
  avg_frame_rate_ = NULL;
}
const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::avg_frame_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return avg_frame_rate_ != NULL ? *avg_frame_rate_ : *default_instance().avg_frame_rate_;
#else
  return avg_frame_rate_ != NULL ? *avg_frame_rate_ : *default_instance_->avg_frame_rate_;
#endif
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_avg_frame_rate() {
  
  if (avg_frame_rate_ == NULL) {
    avg_frame_rate_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
  return avg_frame_rate_;
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_avg_frame_rate() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = avg_frame_rate_;
  avg_frame_rate_ = NULL;
  return temp;
}
void MediaStreamHolder::set_allocated_avg_frame_rate(::whensunset::wsvideoeditor::model::Rational* avg_frame_rate) {
  delete avg_frame_rate_;
  avg_frame_rate_ = avg_frame_rate;
  if (avg_frame_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.avg_frame_rate)
}

// optional .whensunset.wsvideoeditor.model.Rational time_base = 5;
bool MediaStreamHolder::has_time_base() const {
  return !_is_default_instance_ && time_base_ != NULL;
}
void MediaStreamHolder::clear_time_base() {
  if (GetArenaNoVirtual() == NULL && time_base_ != NULL) delete time_base_;
  time_base_ = NULL;
}
const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::time_base() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return time_base_ != NULL ? *time_base_ : *default_instance().time_base_;
#else
  return time_base_ != NULL ? *time_base_ : *default_instance_->time_base_;
#endif
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_time_base() {
  
  if (time_base_ == NULL) {
    time_base_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
  return time_base_;
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_time_base() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = time_base_;
  time_base_ = NULL;
  return temp;
}
void MediaStreamHolder::set_allocated_time_base(::whensunset::wsvideoeditor::model::Rational* time_base) {
  delete time_base_;
  time_base_ = time_base;
  if (time_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.time_base)
}

// optional int64 duration_ts = 6;
void MediaStreamHolder::clear_duration_ts() {
  duration_ts_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MediaStreamHolder::duration_ts() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.duration_ts)
  return duration_ts_;
}
 void MediaStreamHolder::set_duration_ts(::google::protobuf::int64 value) {
  
  duration_ts_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.duration_ts)
}

// optional int32 rotation = 7;
void MediaStreamHolder::clear_rotation() {
  rotation_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::rotation() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.rotation)
  return rotation_;
}
 void MediaStreamHolder::set_rotation(::google::protobuf::int32 value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaStreamHolder.rotation)
}

// optional .whensunset.wsvideoeditor.model.Rational sample_aspect_ratio = 8;
bool MediaStreamHolder::has_sample_aspect_ratio() const {
  return !_is_default_instance_ && sample_aspect_ratio_ != NULL;
}
void MediaStreamHolder::clear_sample_aspect_ratio() {
  if (GetArenaNoVirtual() == NULL && sample_aspect_ratio_ != NULL) delete sample_aspect_ratio_;
  sample_aspect_ratio_ = NULL;
}
const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::sample_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sample_aspect_ratio_ != NULL ? *sample_aspect_ratio_ : *default_instance().sample_aspect_ratio_;
#else
  return sample_aspect_ratio_ != NULL ? *sample_aspect_ratio_ : *default_instance_->sample_aspect_ratio_;
#endif
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_sample_aspect_ratio() {
  
  if (sample_aspect_ratio_ == NULL) {
    sample_aspect_ratio_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
  return sample_aspect_ratio_;
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_sample_aspect_ratio() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = sample_aspect_ratio_;
  sample_aspect_ratio_ = NULL;
  return temp;
}
void MediaStreamHolder::set_allocated_sample_aspect_ratio(::whensunset::wsvideoeditor::model::Rational* sample_aspect_ratio) {
  delete sample_aspect_ratio_;
  sample_aspect_ratio_ = sample_aspect_ratio;
  if (sample_aspect_ratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.sample_aspect_ratio)
}

// optional .whensunset.wsvideoeditor.model.Rational guessed_frame_rate = 9;
bool MediaStreamHolder::has_guessed_frame_rate() const {
  return !_is_default_instance_ && guessed_frame_rate_ != NULL;
}
void MediaStreamHolder::clear_guessed_frame_rate() {
  if (GetArenaNoVirtual() == NULL && guessed_frame_rate_ != NULL) delete guessed_frame_rate_;
  guessed_frame_rate_ = NULL;
}
const ::whensunset::wsvideoeditor::model::Rational& MediaStreamHolder::guessed_frame_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return guessed_frame_rate_ != NULL ? *guessed_frame_rate_ : *default_instance().guessed_frame_rate_;
#else
  return guessed_frame_rate_ != NULL ? *guessed_frame_rate_ : *default_instance_->guessed_frame_rate_;
#endif
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::mutable_guessed_frame_rate() {
  
  if (guessed_frame_rate_ == NULL) {
    guessed_frame_rate_ = new ::whensunset::wsvideoeditor::model::Rational;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
  return guessed_frame_rate_;
}
::whensunset::wsvideoeditor::model::Rational* MediaStreamHolder::release_guessed_frame_rate() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
  
  ::whensunset::wsvideoeditor::model::Rational* temp = guessed_frame_rate_;
  guessed_frame_rate_ = NULL;
  return temp;
}
void MediaStreamHolder::set_allocated_guessed_frame_rate(::whensunset::wsvideoeditor::model::Rational* guessed_frame_rate) {
  delete guessed_frame_rate_;
  guessed_frame_rate_ = guessed_frame_rate;
  if (guessed_frame_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaStreamHolder.guessed_frame_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaFileHolder::kPathFieldNumber;
const int MediaFileHolder::kFormatNameFieldNumber;
const int MediaFileHolder::kProbeScoreFieldNumber;
const int MediaFileHolder::kNumStreamsFieldNumber;
const int MediaFileHolder::kStreamsFieldNumber;
const int MediaFileHolder::kMediaStremaIndexFieldNumber;
const int MediaFileHolder::kAudioStremaIndexFieldNumber;
const int MediaFileHolder::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaFileHolder::MediaFileHolder()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.MediaFileHolder)
}

void MediaFileHolder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MediaFileHolder::MediaFileHolder(const MediaFileHolder& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.MediaFileHolder)
}

void MediaFileHolder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  probe_score_ = 0;
  num_streams_ = 0;
  media_strema_index_ = 0;
  audio_strema_index_ = 0;
  duration_ = 0;
}

MediaFileHolder::~MediaFileHolder() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.MediaFileHolder)
  SharedDtor();
}

void MediaFileHolder::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MediaFileHolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MediaFileHolder& MediaFileHolder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

MediaFileHolder* MediaFileHolder::default_instance_ = NULL;

MediaFileHolder* MediaFileHolder::New(::google::protobuf::Arena* arena) const {
  MediaFileHolder* n = new MediaFileHolder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaFileHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.MediaFileHolder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaFileHolder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaFileHolder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(probe_score_, num_streams_);
  ZR_(media_strema_index_, duration_);
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  streams_.Clear();
}

bool MediaFileHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.MediaFileHolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.wsvideoeditor.model.MediaFileHolder.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format_name;
        break;
      }

      // optional string format_name = 2;
      case 2: {
        if (tag == 18) {
         parse_format_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format_name().data(), this->format_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.wsvideoeditor.model.MediaFileHolder.format_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_probe_score;
        break;
      }

      // optional int32 probe_score = 3;
      case 3: {
        if (tag == 24) {
         parse_probe_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probe_score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_streams;
        break;
      }

      // optional int32 num_streams = 4;
      case 4: {
        if (tag == 32) {
         parse_num_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_streams_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_streams;
        break;
      }

      // repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
      case 5: {
        if (tag == 42) {
         parse_streams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_streams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_media_strema_index;
        break;
      }

      // optional int32 media_strema_index = 6;
      case 6: {
        if (tag == 48) {
         parse_media_strema_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_strema_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_audio_strema_index;
        break;
      }

      // optional int32 audio_strema_index = 7;
      case 7: {
        if (tag == 56) {
         parse_audio_strema_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_strema_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_duration;
        break;
      }

      // optional double duration = 8;
      case 8: {
        if (tag == 65) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.MediaFileHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.MediaFileHolder)
  return false;
#undef DO_
}

void MediaFileHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.MediaFileHolder)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.wsvideoeditor.model.MediaFileHolder.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string format_name = 2;
  if (this->format_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format_name().data(), this->format_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.wsvideoeditor.model.MediaFileHolder.format_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format_name(), output);
  }

  // optional int32 probe_score = 3;
  if (this->probe_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->probe_score(), output);
  }

  // optional int32 num_streams = 4;
  if (this->num_streams() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_streams(), output);
  }

  // repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->streams(i), output);
  }

  // optional int32 media_strema_index = 6;
  if (this->media_strema_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->media_strema_index(), output);
  }

  // optional int32 audio_strema_index = 7;
  if (this->audio_strema_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->audio_strema_index(), output);
  }

  // optional double duration = 8;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.MediaFileHolder)
}

int MediaFileHolder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.MediaFileHolder)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string format_name = 2;
  if (this->format_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format_name());
  }

  // optional int32 probe_score = 3;
  if (this->probe_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->probe_score());
  }

  // optional int32 num_streams = 4;
  if (this->num_streams() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_streams());
  }

  // optional int32 media_strema_index = 6;
  if (this->media_strema_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_strema_index());
  }

  // optional int32 audio_strema_index = 7;
  if (this->audio_strema_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio_strema_index());
  }

  // optional double duration = 8;
  if (this->duration() != 0) {
    total_size += 1 + 8;
  }

  // repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaFileHolder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MediaFileHolder*>(&from));
}

void MediaFileHolder::MergeFrom(const MediaFileHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.MediaFileHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streams_.MergeFrom(from.streams_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format_name().size() > 0) {

    format_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_name_);
  }
  if (from.probe_score() != 0) {
    set_probe_score(from.probe_score());
  }
  if (from.num_streams() != 0) {
    set_num_streams(from.num_streams());
  }
  if (from.media_strema_index() != 0) {
    set_media_strema_index(from.media_strema_index());
  }
  if (from.audio_strema_index() != 0) {
    set_audio_strema_index(from.audio_strema_index());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void MediaFileHolder::CopyFrom(const MediaFileHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.MediaFileHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFileHolder::IsInitialized() const {

  return true;
}

void MediaFileHolder::Swap(MediaFileHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaFileHolder::InternalSwap(MediaFileHolder* other) {
  path_.Swap(&other->path_);
  format_name_.Swap(&other->format_name_);
  std::swap(probe_score_, other->probe_score_);
  std::swap(num_streams_, other->num_streams_);
  streams_.UnsafeArenaSwap(&other->streams_);
  std::swap(media_strema_index_, other->media_strema_index_);
  std::swap(audio_strema_index_, other->audio_strema_index_);
  std::swap(duration_, other->duration_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MediaFileHolder::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.MediaFileHolder";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaFileHolder

// optional string path = 1;
void MediaFileHolder::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MediaFileHolder::path() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaFileHolder::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
 void MediaFileHolder::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
 void MediaFileHolder::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}
 ::std::string* MediaFileHolder::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaFileHolder::release_path() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaFileHolder.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaFileHolder::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaFileHolder.path)
}

// optional string format_name = 2;
void MediaFileHolder::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MediaFileHolder::format_name() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  return format_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaFileHolder::set_format_name(const ::std::string& value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
 void MediaFileHolder::set_format_name(const char* value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
 void MediaFileHolder::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}
 ::std::string* MediaFileHolder::mutable_format_name() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  return format_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaFileHolder::release_format_name() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
  
  return format_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaFileHolder::set_allocated_format_name(::std::string* format_name) {
  if (format_name != NULL) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaFileHolder.format_name)
}

// optional int32 probe_score = 3;
void MediaFileHolder::clear_probe_score() {
  probe_score_ = 0;
}
 ::google::protobuf::int32 MediaFileHolder::probe_score() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.probe_score)
  return probe_score_;
}
 void MediaFileHolder::set_probe_score(::google::protobuf::int32 value) {
  
  probe_score_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.probe_score)
}

// optional int32 num_streams = 4;
void MediaFileHolder::clear_num_streams() {
  num_streams_ = 0;
}
 ::google::protobuf::int32 MediaFileHolder::num_streams() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.num_streams)
  return num_streams_;
}
 void MediaFileHolder::set_num_streams(::google::protobuf::int32 value) {
  
  num_streams_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.num_streams)
}

// repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;
int MediaFileHolder::streams_size() const {
  return streams_.size();
}
void MediaFileHolder::clear_streams() {
  streams_.Clear();
}
const ::whensunset::wsvideoeditor::model::MediaStreamHolder& MediaFileHolder::streams(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Get(index);
}
::whensunset::wsvideoeditor::model::MediaStreamHolder* MediaFileHolder::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Mutable(index);
}
::whensunset::wsvideoeditor::model::MediaStreamHolder* MediaFileHolder::add_streams() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >*
MediaFileHolder::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return &streams_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaStreamHolder >&
MediaFileHolder::streams() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.MediaFileHolder.streams)
  return streams_;
}

// optional int32 media_strema_index = 6;
void MediaFileHolder::clear_media_strema_index() {
  media_strema_index_ = 0;
}
 ::google::protobuf::int32 MediaFileHolder::media_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.media_strema_index)
  return media_strema_index_;
}
 void MediaFileHolder::set_media_strema_index(::google::protobuf::int32 value) {
  
  media_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.media_strema_index)
}

// optional int32 audio_strema_index = 7;
void MediaFileHolder::clear_audio_strema_index() {
  audio_strema_index_ = 0;
}
 ::google::protobuf::int32 MediaFileHolder::audio_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.audio_strema_index)
  return audio_strema_index_;
}
 void MediaFileHolder::set_audio_strema_index(::google::protobuf::int32 value) {
  
  audio_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.audio_strema_index)
}

// optional double duration = 8;
void MediaFileHolder::clear_duration() {
  duration_ = 0;
}
 double MediaFileHolder::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaFileHolder.duration)
  return duration_;
}
 void MediaFileHolder::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaFileHolder.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaAsset::kAssetIdFieldNumber;
const int MediaAsset::kAssetPathFieldNumber;
const int MediaAsset::kMediaAssetFileHolderFieldNumber;
const int MediaAsset::kClippedTimeRangeFieldNumber;
const int MediaAsset::kVolumeFieldNumber;
const int MediaAsset::kMediaAssetScaleTypeFieldNumber;
const int MediaAsset::kAlphaInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaAsset::MediaAsset()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.MediaAsset)
}

void MediaAsset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  media_asset_file_holder_ = const_cast< ::whensunset::wsvideoeditor::model::MediaFileHolder*>(
      ::whensunset::wsvideoeditor::model::MediaFileHolder::internal_default_instance());
#else
  media_asset_file_holder_ = const_cast< ::whensunset::wsvideoeditor::model::MediaFileHolder*>(&::whensunset::wsvideoeditor::model::MediaFileHolder::default_instance());
#endif
}

MediaAsset::MediaAsset(const MediaAsset& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.MediaAsset)
}

void MediaAsset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_asset_file_holder_ = NULL;
  volume_ = 0;
  media_asset_scale_type_ = 0;
  alpha_info_ = 0;
}

MediaAsset::~MediaAsset() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.MediaAsset)
  SharedDtor();
}

void MediaAsset::SharedDtor() {
  asset_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete media_asset_file_holder_;
  }
}

void MediaAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MediaAsset& MediaAsset::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

MediaAsset* MediaAsset::default_instance_ = NULL;

MediaAsset* MediaAsset::New(::google::protobuf::Arena* arena) const {
  MediaAsset* n = new MediaAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.MediaAsset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaAsset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaAsset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(volume_, alpha_info_);
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && media_asset_file_holder_ != NULL) delete media_asset_file_holder_;
  media_asset_file_holder_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  clipped_time_range_.Clear();
}

bool MediaAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.MediaAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 asset_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asset_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_asset_path;
        break;
      }

      // optional string asset_path = 2;
      case 2: {
        if (tag == 18) {
         parse_asset_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_path().data(), this->asset_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.wsvideoeditor.model.MediaAsset.asset_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media_asset_file_holder;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
      case 3: {
        if (tag == 26) {
         parse_media_asset_file_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media_asset_file_holder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clipped_time_range;
        break;
      }

      // repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
      case 4: {
        if (tag == 34) {
         parse_clipped_time_range:
          DO_(input->IncrementRecursionDepth());
         parse_loop_clipped_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clipped_time_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_clipped_time_range;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_volume;
        break;
      }

      // optional double volume = 5;
      case 5: {
        if (tag == 41) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_media_asset_scale_type;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
      case 6: {
        if (tag == 48) {
         parse_media_asset_scale_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_asset_scale_type(static_cast< ::whensunset::wsvideoeditor::model::MediaAssetScaleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_alpha_info;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
      case 7: {
        if (tag == 56) {
         parse_alpha_info:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_alpha_info(static_cast< ::whensunset::wsvideoeditor::model::YuvAlphaType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.MediaAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.MediaAsset)
  return false;
#undef DO_
}

void MediaAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.MediaAsset)
  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asset_id(), output);
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_path().data(), this->asset_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.wsvideoeditor.model.MediaAsset.asset_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset_path(), output);
  }

  // optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
  if (this->has_media_asset_file_holder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->media_asset_file_holder_, output);
  }

  // repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
  for (unsigned int i = 0, n = this->clipped_time_range_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->clipped_time_range(i), output);
  }

  // optional double volume = 5;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
  if (this->media_asset_scale_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->media_asset_scale_type(), output);
  }

  // optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
  if (this->alpha_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->alpha_info(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.MediaAsset)
}

int MediaAsset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.MediaAsset)
  int total_size = 0;

  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->asset_id());
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_path());
  }

  // optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
  if (this->has_media_asset_file_holder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->media_asset_file_holder_);
  }

  // optional double volume = 5;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
  if (this->media_asset_scale_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_asset_scale_type());
  }

  // optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
  if (this->alpha_info() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->alpha_info());
  }

  // repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
  total_size += 1 * this->clipped_time_range_size();
  for (int i = 0; i < this->clipped_time_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clipped_time_range(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaAsset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MediaAsset*>(&from));
}

void MediaAsset::MergeFrom(const MediaAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.MediaAsset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  clipped_time_range_.MergeFrom(from.clipped_time_range_);
  if (from.asset_id() != 0) {
    set_asset_id(from.asset_id());
  }
  if (from.asset_path().size() > 0) {

    asset_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_path_);
  }
  if (from.has_media_asset_file_holder()) {
    mutable_media_asset_file_holder()->::whensunset::wsvideoeditor::model::MediaFileHolder::MergeFrom(from.media_asset_file_holder());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.media_asset_scale_type() != 0) {
    set_media_asset_scale_type(from.media_asset_scale_type());
  }
  if (from.alpha_info() != 0) {
    set_alpha_info(from.alpha_info());
  }
}

void MediaAsset::CopyFrom(const MediaAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.MediaAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaAsset::IsInitialized() const {

  return true;
}

void MediaAsset::Swap(MediaAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaAsset::InternalSwap(MediaAsset* other) {
  std::swap(asset_id_, other->asset_id_);
  asset_path_.Swap(&other->asset_path_);
  std::swap(media_asset_file_holder_, other->media_asset_file_holder_);
  clipped_time_range_.UnsafeArenaSwap(&other->clipped_time_range_);
  std::swap(volume_, other->volume_);
  std::swap(media_asset_scale_type_, other->media_asset_scale_type_);
  std::swap(alpha_info_, other->alpha_info_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MediaAsset::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.MediaAsset";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaAsset

// optional uint64 asset_id = 1;
void MediaAsset::clear_asset_id() {
  asset_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MediaAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.asset_id)
  return asset_id_;
}
 void MediaAsset::set_asset_id(::google::protobuf::uint64 value) {
  
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.asset_id)
}

// optional string asset_path = 2;
void MediaAsset::clear_asset_path() {
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MediaAsset::asset_path() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  return asset_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaAsset::set_asset_path(const ::std::string& value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
 void MediaAsset::set_asset_path(const char* value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
 void MediaAsset::set_asset_path(const char* value, size_t size) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}
 ::std::string* MediaAsset::mutable_asset_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  return asset_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaAsset::release_asset_path() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
  
  return asset_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaAsset::set_allocated_asset_path(::std::string* asset_path) {
  if (asset_path != NULL) {
    
  } else {
    
  }
  asset_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaAsset.asset_path)
}

// optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;
bool MediaAsset::has_media_asset_file_holder() const {
  return !_is_default_instance_ && media_asset_file_holder_ != NULL;
}
void MediaAsset::clear_media_asset_file_holder() {
  if (GetArenaNoVirtual() == NULL && media_asset_file_holder_ != NULL) delete media_asset_file_holder_;
  media_asset_file_holder_ = NULL;
}
const ::whensunset::wsvideoeditor::model::MediaFileHolder& MediaAsset::media_asset_file_holder() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return media_asset_file_holder_ != NULL ? *media_asset_file_holder_ : *default_instance().media_asset_file_holder_;
#else
  return media_asset_file_holder_ != NULL ? *media_asset_file_holder_ : *default_instance_->media_asset_file_holder_;
#endif
}
::whensunset::wsvideoeditor::model::MediaFileHolder* MediaAsset::mutable_media_asset_file_holder() {
  
  if (media_asset_file_holder_ == NULL) {
    media_asset_file_holder_ = new ::whensunset::wsvideoeditor::model::MediaFileHolder;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
  return media_asset_file_holder_;
}
::whensunset::wsvideoeditor::model::MediaFileHolder* MediaAsset::release_media_asset_file_holder() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
  
  ::whensunset::wsvideoeditor::model::MediaFileHolder* temp = media_asset_file_holder_;
  media_asset_file_holder_ = NULL;
  return temp;
}
void MediaAsset::set_allocated_media_asset_file_holder(::whensunset::wsvideoeditor::model::MediaFileHolder* media_asset_file_holder) {
  delete media_asset_file_holder_;
  media_asset_file_holder_ = media_asset_file_holder;
  if (media_asset_file_holder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.MediaAsset.media_asset_file_holder)
}

// repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;
int MediaAsset::clipped_time_range_size() const {
  return clipped_time_range_.size();
}
void MediaAsset::clear_clipped_time_range() {
  clipped_time_range_.Clear();
}
const ::whensunset::wsvideoeditor::model::TimeRange& MediaAsset::clipped_time_range(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Get(index);
}
::whensunset::wsvideoeditor::model::TimeRange* MediaAsset::mutable_clipped_time_range(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Mutable(index);
}
::whensunset::wsvideoeditor::model::TimeRange* MediaAsset::add_clipped_time_range() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >*
MediaAsset::mutable_clipped_time_range() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return &clipped_time_range_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::TimeRange >&
MediaAsset::clipped_time_range() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.MediaAsset.clipped_time_range)
  return clipped_time_range_;
}

// optional double volume = 5;
void MediaAsset::clear_volume() {
  volume_ = 0;
}
 double MediaAsset::volume() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.volume)
  return volume_;
}
 void MediaAsset::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.volume)
}

// optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;
void MediaAsset::clear_media_asset_scale_type() {
  media_asset_scale_type_ = 0;
}
 ::whensunset::wsvideoeditor::model::MediaAssetScaleType MediaAsset::media_asset_scale_type() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.media_asset_scale_type)
  return static_cast< ::whensunset::wsvideoeditor::model::MediaAssetScaleType >(media_asset_scale_type_);
}
 void MediaAsset::set_media_asset_scale_type(::whensunset::wsvideoeditor::model::MediaAssetScaleType value) {
  
  media_asset_scale_type_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.media_asset_scale_type)
}

// optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;
void MediaAsset::clear_alpha_info() {
  alpha_info_ = 0;
}
 ::whensunset::wsvideoeditor::model::YuvAlphaType MediaAsset::alpha_info() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.MediaAsset.alpha_info)
  return static_cast< ::whensunset::wsvideoeditor::model::YuvAlphaType >(alpha_info_);
}
 void MediaAsset::set_alpha_info(::whensunset::wsvideoeditor::model::YuvAlphaType value) {
  
  alpha_info_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.MediaAsset.alpha_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EditorProjectPrivateData::kProjectWidthFieldNumber;
const int EditorProjectPrivateData::kProjectHeightFieldNumber;
const int EditorProjectPrivateData::kProjectFpsFieldNumber;
const int EditorProjectPrivateData::kProjectDurationFieldNumber;
const int EditorProjectPrivateData::kInputMediaAssetsNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EditorProjectPrivateData::EditorProjectPrivateData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
}

void EditorProjectPrivateData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EditorProjectPrivateData::EditorProjectPrivateData(const EditorProjectPrivateData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
}

void EditorProjectPrivateData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  project_width_ = 0;
  project_height_ = 0;
  project_fps_ = 0;
  project_duration_ = 0;
  input_media_assets_number_ = 0;
}

EditorProjectPrivateData::~EditorProjectPrivateData() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  SharedDtor();
}

void EditorProjectPrivateData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EditorProjectPrivateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EditorProjectPrivateData& EditorProjectPrivateData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

EditorProjectPrivateData* EditorProjectPrivateData::default_instance_ = NULL;

EditorProjectPrivateData* EditorProjectPrivateData::New(::google::protobuf::Arena* arena) const {
  EditorProjectPrivateData* n = new EditorProjectPrivateData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EditorProjectPrivateData::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EditorProjectPrivateData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EditorProjectPrivateData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(project_width_, input_media_assets_number_);

#undef ZR_HELPER_
#undef ZR_

}

bool EditorProjectPrivateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 project_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_project_height;
        break;
      }

      // optional int32 project_height = 2;
      case 2: {
        if (tag == 16) {
         parse_project_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_project_fps;
        break;
      }

      // optional double project_fps = 3;
      case 3: {
        if (tag == 25) {
         parse_project_fps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &project_fps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_project_duration;
        break;
      }

      // optional double project_duration = 4;
      case 4: {
        if (tag == 33) {
         parse_project_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &project_duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_input_media_assets_number;
        break;
      }

      // optional int32 input_media_assets_number = 5;
      case 5: {
        if (tag == 40) {
         parse_input_media_assets_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_media_assets_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  return false;
#undef DO_
}

void EditorProjectPrivateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  // optional int32 project_width = 1;
  if (this->project_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->project_width(), output);
  }

  // optional int32 project_height = 2;
  if (this->project_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->project_height(), output);
  }

  // optional double project_fps = 3;
  if (this->project_fps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->project_fps(), output);
  }

  // optional double project_duration = 4;
  if (this->project_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->project_duration(), output);
  }

  // optional int32 input_media_assets_number = 5;
  if (this->input_media_assets_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->input_media_assets_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
}

int EditorProjectPrivateData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  int total_size = 0;

  // optional int32 project_width = 1;
  if (this->project_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->project_width());
  }

  // optional int32 project_height = 2;
  if (this->project_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->project_height());
  }

  // optional double project_fps = 3;
  if (this->project_fps() != 0) {
    total_size += 1 + 8;
  }

  // optional double project_duration = 4;
  if (this->project_duration() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 input_media_assets_number = 5;
  if (this->input_media_assets_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_media_assets_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditorProjectPrivateData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EditorProjectPrivateData*>(&from));
}

void EditorProjectPrivateData::MergeFrom(const EditorProjectPrivateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.project_width() != 0) {
    set_project_width(from.project_width());
  }
  if (from.project_height() != 0) {
    set_project_height(from.project_height());
  }
  if (from.project_fps() != 0) {
    set_project_fps(from.project_fps());
  }
  if (from.project_duration() != 0) {
    set_project_duration(from.project_duration());
  }
  if (from.input_media_assets_number() != 0) {
    set_input_media_assets_number(from.input_media_assets_number());
  }
}

void EditorProjectPrivateData::CopyFrom(const EditorProjectPrivateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.EditorProjectPrivateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditorProjectPrivateData::IsInitialized() const {

  return true;
}

void EditorProjectPrivateData::Swap(EditorProjectPrivateData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EditorProjectPrivateData::InternalSwap(EditorProjectPrivateData* other) {
  std::swap(project_width_, other->project_width_);
  std::swap(project_height_, other->project_height_);
  std::swap(project_fps_, other->project_fps_);
  std::swap(project_duration_, other->project_duration_);
  std::swap(input_media_assets_number_, other->input_media_assets_number_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EditorProjectPrivateData::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.EditorProjectPrivateData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EditorProjectPrivateData

// optional int32 project_width = 1;
void EditorProjectPrivateData::clear_project_width() {
  project_width_ = 0;
}
 ::google::protobuf::int32 EditorProjectPrivateData::project_width() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_width)
  return project_width_;
}
 void EditorProjectPrivateData::set_project_width(::google::protobuf::int32 value) {
  
  project_width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_width)
}

// optional int32 project_height = 2;
void EditorProjectPrivateData::clear_project_height() {
  project_height_ = 0;
}
 ::google::protobuf::int32 EditorProjectPrivateData::project_height() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_height)
  return project_height_;
}
 void EditorProjectPrivateData::set_project_height(::google::protobuf::int32 value) {
  
  project_height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_height)
}

// optional double project_fps = 3;
void EditorProjectPrivateData::clear_project_fps() {
  project_fps_ = 0;
}
 double EditorProjectPrivateData::project_fps() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_fps)
  return project_fps_;
}
 void EditorProjectPrivateData::set_project_fps(double value) {
  
  project_fps_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_fps)
}

// optional double project_duration = 4;
void EditorProjectPrivateData::clear_project_duration() {
  project_duration_ = 0;
}
 double EditorProjectPrivateData::project_duration() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_duration)
  return project_duration_;
}
 void EditorProjectPrivateData::set_project_duration(double value) {
  
  project_duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.project_duration)
}

// optional int32 input_media_assets_number = 5;
void EditorProjectPrivateData::clear_input_media_assets_number() {
  input_media_assets_number_ = 0;
}
 ::google::protobuf::int32 EditorProjectPrivateData::input_media_assets_number() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProjectPrivateData.input_media_assets_number)
  return input_media_assets_number_;
}
 void EditorProjectPrivateData::set_input_media_assets_number(::google::protobuf::int32 value) {
  
  input_media_assets_number_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProjectPrivateData.input_media_assets_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EditorProject::kProjectIdFieldNumber;
const int EditorProject::kMediaAssetFieldNumber;
const int EditorProject::kPrivateDataFieldNumber;
const int EditorProject::kBlurPaddingAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EditorProject::EditorProject()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.wsvideoeditor.model.EditorProject)
}

void EditorProject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  private_data_ = const_cast< ::whensunset::wsvideoeditor::model::EditorProjectPrivateData*>(
      ::whensunset::wsvideoeditor::model::EditorProjectPrivateData::internal_default_instance());
#else
  private_data_ = const_cast< ::whensunset::wsvideoeditor::model::EditorProjectPrivateData*>(&::whensunset::wsvideoeditor::model::EditorProjectPrivateData::default_instance());
#endif
}

EditorProject::EditorProject(const EditorProject& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.wsvideoeditor.model.EditorProject)
}

void EditorProject::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  project_id_ = GOOGLE_LONGLONG(0);
  private_data_ = NULL;
  blur_padding_area_ = false;
}

EditorProject::~EditorProject() {
  // @@protoc_insertion_point(destructor:whensunset.wsvideoeditor.model.EditorProject)
  SharedDtor();
}

void EditorProject::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete private_data_;
  }
}

void EditorProject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EditorProject& EditorProject::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fvideo_5feditor_5fsdk_2eproto();
#endif
  return *default_instance_;
}

EditorProject* EditorProject::default_instance_ = NULL;

EditorProject* EditorProject::New(::google::protobuf::Arena* arena) const {
  EditorProject* n = new EditorProject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EditorProject::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.wsvideoeditor.model.EditorProject)
  project_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && private_data_ != NULL) delete private_data_;
  private_data_ = NULL;
  blur_padding_area_ = false;
  media_asset_.Clear();
}

bool EditorProject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.wsvideoeditor.model.EditorProject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 project_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &project_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_asset;
        break;
      }

      // repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
      case 2: {
        if (tag == 18) {
         parse_media_asset:
          DO_(input->IncrementRecursionDepth());
         parse_loop_media_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_media_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_media_asset;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_private_data;
        break;
      }

      // optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
      case 3: {
        if (tag == 26) {
         parse_private_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blur_padding_area;
        break;
      }

      // optional bool blur_padding_area = 4;
      case 4: {
        if (tag == 32) {
         parse_blur_padding_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blur_padding_area_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.wsvideoeditor.model.EditorProject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.wsvideoeditor.model.EditorProject)
  return false;
#undef DO_
}

void EditorProject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.wsvideoeditor.model.EditorProject)
  // optional int64 project_id = 1;
  if (this->project_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->project_id(), output);
  }

  // repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
  for (unsigned int i = 0, n = this->media_asset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->media_asset(i), output);
  }

  // optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
  if (this->has_private_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->private_data_, output);
  }

  // optional bool blur_padding_area = 4;
  if (this->blur_padding_area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blur_padding_area(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.wsvideoeditor.model.EditorProject)
}

int EditorProject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.wsvideoeditor.model.EditorProject)
  int total_size = 0;

  // optional int64 project_id = 1;
  if (this->project_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->project_id());
  }

  // optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
  if (this->has_private_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->private_data_);
  }

  // optional bool blur_padding_area = 4;
  if (this->blur_padding_area() != 0) {
    total_size += 1 + 1;
  }

  // repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
  total_size += 1 * this->media_asset_size();
  for (int i = 0; i < this->media_asset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->media_asset(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditorProject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EditorProject*>(&from));
}

void EditorProject::MergeFrom(const EditorProject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.wsvideoeditor.model.EditorProject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  media_asset_.MergeFrom(from.media_asset_);
  if (from.project_id() != 0) {
    set_project_id(from.project_id());
  }
  if (from.has_private_data()) {
    mutable_private_data()->::whensunset::wsvideoeditor::model::EditorProjectPrivateData::MergeFrom(from.private_data());
  }
  if (from.blur_padding_area() != 0) {
    set_blur_padding_area(from.blur_padding_area());
  }
}

void EditorProject::CopyFrom(const EditorProject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.wsvideoeditor.model.EditorProject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditorProject::IsInitialized() const {

  return true;
}

void EditorProject::Swap(EditorProject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EditorProject::InternalSwap(EditorProject* other) {
  std::swap(project_id_, other->project_id_);
  media_asset_.UnsafeArenaSwap(&other->media_asset_);
  std::swap(private_data_, other->private_data_);
  std::swap(blur_padding_area_, other->blur_padding_area_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EditorProject::GetTypeName() const {
  return "whensunset.wsvideoeditor.model.EditorProject";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EditorProject

// optional int64 project_id = 1;
void EditorProject::clear_project_id() {
  project_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EditorProject::project_id() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.project_id)
  return project_id_;
}
 void EditorProject::set_project_id(::google::protobuf::int64 value) {
  
  project_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProject.project_id)
}

// repeated .whensunset.wsvideoeditor.model.MediaAsset media_asset = 2;
int EditorProject::media_asset_size() const {
  return media_asset_.size();
}
void EditorProject::clear_media_asset() {
  media_asset_.Clear();
}
const ::whensunset::wsvideoeditor::model::MediaAsset& EditorProject::media_asset(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Get(index);
}
::whensunset::wsvideoeditor::model::MediaAsset* EditorProject::mutable_media_asset(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Mutable(index);
}
::whensunset::wsvideoeditor::model::MediaAsset* EditorProject::add_media_asset() {
  // @@protoc_insertion_point(field_add:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >*
EditorProject::mutable_media_asset() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return &media_asset_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::wsvideoeditor::model::MediaAsset >&
EditorProject::media_asset() const {
  // @@protoc_insertion_point(field_list:whensunset.wsvideoeditor.model.EditorProject.media_asset)
  return media_asset_;
}

// optional .whensunset.wsvideoeditor.model.EditorProjectPrivateData private_data = 3;
bool EditorProject::has_private_data() const {
  return !_is_default_instance_ && private_data_ != NULL;
}
void EditorProject::clear_private_data() {
  if (GetArenaNoVirtual() == NULL && private_data_ != NULL) delete private_data_;
  private_data_ = NULL;
}
const ::whensunset::wsvideoeditor::model::EditorProjectPrivateData& EditorProject::private_data() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.private_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return private_data_ != NULL ? *private_data_ : *default_instance().private_data_;
#else
  return private_data_ != NULL ? *private_data_ : *default_instance_->private_data_;
#endif
}
::whensunset::wsvideoeditor::model::EditorProjectPrivateData* EditorProject::mutable_private_data() {
  
  if (private_data_ == NULL) {
    private_data_ = new ::whensunset::wsvideoeditor::model::EditorProjectPrivateData;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.wsvideoeditor.model.EditorProject.private_data)
  return private_data_;
}
::whensunset::wsvideoeditor::model::EditorProjectPrivateData* EditorProject::release_private_data() {
  // @@protoc_insertion_point(field_release:whensunset.wsvideoeditor.model.EditorProject.private_data)
  
  ::whensunset::wsvideoeditor::model::EditorProjectPrivateData* temp = private_data_;
  private_data_ = NULL;
  return temp;
}
void EditorProject::set_allocated_private_data(::whensunset::wsvideoeditor::model::EditorProjectPrivateData* private_data) {
  delete private_data_;
  private_data_ = private_data;
  if (private_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.wsvideoeditor.model.EditorProject.private_data)
}

// optional bool blur_padding_area = 4;
void EditorProject::clear_blur_padding_area() {
  blur_padding_area_ = false;
}
 bool EditorProject::blur_padding_area() const {
  // @@protoc_insertion_point(field_get:whensunset.wsvideoeditor.model.EditorProject.blur_padding_area)
  return blur_padding_area_;
}
 void EditorProject::set_blur_padding_area(bool value) {
  
  blur_padding_area_ = value;
  // @@protoc_insertion_point(field_set:whensunset.wsvideoeditor.model.EditorProject.blur_padding_area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace wsvideoeditor
}  // namespace whensunset

// @@protoc_insertion_point(global_scope)
