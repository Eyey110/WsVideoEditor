// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_video_editor_sdk.proto

package com.whensunset.wsvideoeditorsdk.model;

/**
 * <pre>
 * 表示一个多媒体素材
 * </pre>
 *
 * Protobuf type {@code whensunset.wsvideoeditor.model.MediaAsset}
 */
public  final class MediaAsset extends
    com.google.protobuf.GeneratedMessageLite<
        MediaAsset, MediaAsset.Builder> implements
    // @@protoc_insertion_point(message_implements:whensunset.wsvideoeditor.model.MediaAsset)
    MediaAssetOrBuilder {
  private MediaAsset() {
    assetPath_ = "";
    clippedTimeRange_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int ASSET_ID_FIELD_NUMBER = 1;
  private long assetId_;
  /**
   * <pre>
   * 相同表示当前素材是同样的
   * </pre>
   *
   * <code>optional uint64 asset_id = 1;</code>
   */
  public long getAssetId() {
    return assetId_;
  }
  /**
   * <pre>
   * 相同表示当前素材是同样的
   * </pre>
   *
   * <code>optional uint64 asset_id = 1;</code>
   */
  private void setAssetId(long value) {
    
    assetId_ = value;
  }
  /**
   * <pre>
   * 相同表示当前素材是同样的
   * </pre>
   *
   * <code>optional uint64 asset_id = 1;</code>
   */
  private void clearAssetId() {
    
    assetId_ = 0L;
  }

  public static final int ASSET_PATH_FIELD_NUMBER = 2;
  private java.lang.String assetPath_;
  /**
   * <code>optional string asset_path = 2;</code>
   */
  public java.lang.String getAssetPath() {
    return assetPath_;
  }
  /**
   * <code>optional string asset_path = 2;</code>
   */
  public com.google.protobuf.ByteString
      getAssetPathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(assetPath_);
  }
  /**
   * <code>optional string asset_path = 2;</code>
   */
  private void setAssetPath(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    assetPath_ = value;
  }
  /**
   * <code>optional string asset_path = 2;</code>
   */
  private void clearAssetPath() {
    
    assetPath_ = getDefaultInstance().getAssetPath();
  }
  /**
   * <code>optional string asset_path = 2;</code>
   */
  private void setAssetPathBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    assetPath_ = value.toStringUtf8();
  }

  public static final int MEDIA_ASSET_FILE_HOLDER_FIELD_NUMBER = 3;
  private com.whensunset.wsvideoeditorsdk.model.MediaFileHolder mediaAssetFileHolder_;
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  public boolean hasMediaAssetFileHolder() {
    return mediaAssetFileHolder_ != null;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.MediaFileHolder getMediaAssetFileHolder() {
    return mediaAssetFileHolder_ == null ? com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.getDefaultInstance() : mediaAssetFileHolder_;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  private void setMediaAssetFileHolder(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder value) {
    if (value == null) {
      throw new NullPointerException();
    }
    mediaAssetFileHolder_ = value;
    
    }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  private void setMediaAssetFileHolder(
      com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.Builder builderForValue) {
    mediaAssetFileHolder_ = builderForValue.build();
    
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  private void mergeMediaAssetFileHolder(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder value) {
    if (mediaAssetFileHolder_ != null &&
        mediaAssetFileHolder_ != com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.getDefaultInstance()) {
      mediaAssetFileHolder_ =
        com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.newBuilder(mediaAssetFileHolder_).mergeFrom(value).buildPartial();
    } else {
      mediaAssetFileHolder_ = value;
    }
    
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
   */
  private void clearMediaAssetFileHolder() {  mediaAssetFileHolder_ = null;
    
  }

  public static final int CLIPPED_TIME_RANGE_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<com.whensunset.wsvideoeditorsdk.model.TimeRange> clippedTimeRange_;
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  public java.util.List<com.whensunset.wsvideoeditorsdk.model.TimeRange> getClippedTimeRangeList() {
    return clippedTimeRange_;
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  public java.util.List<? extends com.whensunset.wsvideoeditorsdk.model.TimeRangeOrBuilder> 
      getClippedTimeRangeOrBuilderList() {
    return clippedTimeRange_;
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  public int getClippedTimeRangeCount() {
    return clippedTimeRange_.size();
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.TimeRange getClippedTimeRange(int index) {
    return clippedTimeRange_.get(index);
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.TimeRangeOrBuilder getClippedTimeRangeOrBuilder(
      int index) {
    return clippedTimeRange_.get(index);
  }
  private void ensureClippedTimeRangeIsMutable() {
    if (!clippedTimeRange_.isModifiable()) {
      clippedTimeRange_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(clippedTimeRange_);
     }
  }

  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void setClippedTimeRange(
      int index, com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.set(index, value);
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void setClippedTimeRange(
      int index, com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void addClippedTimeRange(com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.add(value);
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void addClippedTimeRange(
      int index, com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.add(index, value);
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void addClippedTimeRange(
      com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.add(builderForValue.build());
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void addClippedTimeRange(
      int index, com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void addAllClippedTimeRange(
      java.lang.Iterable<? extends com.whensunset.wsvideoeditorsdk.model.TimeRange> values) {
    ensureClippedTimeRangeIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, clippedTimeRange_);
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void clearClippedTimeRange() {
    clippedTimeRange_ = emptyProtobufList();
  }
  /**
   * <pre>
   * 当前素材被剪裁的时间区域
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
   */
  private void removeClippedTimeRange(int index) {
    ensureClippedTimeRangeIsMutable();
    clippedTimeRange_.remove(index);
  }

  public static final int VOLUME_FIELD_NUMBER = 5;
  private double volume_;
  /**
   * <pre>
   * 声音大小
   * </pre>
   *
   * <code>optional double volume = 5;</code>
   */
  public double getVolume() {
    return volume_;
  }
  /**
   * <pre>
   * 声音大小
   * </pre>
   *
   * <code>optional double volume = 5;</code>
   */
  private void setVolume(double value) {
    
    volume_ = value;
  }
  /**
   * <pre>
   * 声音大小
   * </pre>
   *
   * <code>optional double volume = 5;</code>
   */
  private void clearVolume() {
    
    volume_ = 0D;
  }

  public static final int MEDIA_ASSET_SCALE_TYPE_FIELD_NUMBER = 6;
  private int mediaAssetScaleType_;
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
   */
  public int getMediaAssetScaleTypeValue() {
    return mediaAssetScaleType_;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType getMediaAssetScaleType() {
    com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType result = com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType.forNumber(mediaAssetScaleType_);
    return result == null ? com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType.UNRECOGNIZED : result;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
   */
  private void setMediaAssetScaleTypeValue(int value) {
      mediaAssetScaleType_ = value;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
   */
  private void setMediaAssetScaleType(com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    
    mediaAssetScaleType_ = value.getNumber();
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
   */
  private void clearMediaAssetScaleType() {
    
    mediaAssetScaleType_ = 0;
  }

  public static final int ALPHA_INFO_FIELD_NUMBER = 7;
  private int alphaInfo_;
  /**
   * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
   */
  public int getAlphaInfoValue() {
    return alphaInfo_;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.YuvAlphaType getAlphaInfo() {
    com.whensunset.wsvideoeditorsdk.model.YuvAlphaType result = com.whensunset.wsvideoeditorsdk.model.YuvAlphaType.forNumber(alphaInfo_);
    return result == null ? com.whensunset.wsvideoeditorsdk.model.YuvAlphaType.UNRECOGNIZED : result;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
   */
  private void setAlphaInfoValue(int value) {
      alphaInfo_ = value;
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
   */
  private void setAlphaInfo(com.whensunset.wsvideoeditorsdk.model.YuvAlphaType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    
    alphaInfo_ = value.getNumber();
  }
  /**
   * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
   */
  private void clearAlphaInfo() {
    
    alphaInfo_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (assetId_ != 0L) {
      output.writeUInt64(1, assetId_);
    }
    if (!assetPath_.isEmpty()) {
      output.writeString(2, getAssetPath());
    }
    if (mediaAssetFileHolder_ != null) {
      output.writeMessage(3, getMediaAssetFileHolder());
    }
    for (int i = 0; i < clippedTimeRange_.size(); i++) {
      output.writeMessage(4, clippedTimeRange_.get(i));
    }
    if (volume_ != 0D) {
      output.writeDouble(5, volume_);
    }
    if (mediaAssetScaleType_ != com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType.MEDIA_ASSET_SCALE_DEFAULT.getNumber()) {
      output.writeEnum(6, mediaAssetScaleType_);
    }
    if (alphaInfo_ != com.whensunset.wsvideoeditorsdk.model.YuvAlphaType.YUV_ALPHA_TYPE_NONE.getNumber()) {
      output.writeEnum(7, alphaInfo_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (assetId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, assetId_);
    }
    if (!assetPath_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getAssetPath());
    }
    if (mediaAssetFileHolder_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMediaAssetFileHolder());
    }
    for (int i = 0; i < clippedTimeRange_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, clippedTimeRange_.get(i));
    }
    if (volume_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, volume_);
    }
    if (mediaAssetScaleType_ != com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType.MEDIA_ASSET_SCALE_DEFAULT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, mediaAssetScaleType_);
    }
    if (alphaInfo_ != com.whensunset.wsvideoeditorsdk.model.YuvAlphaType.YUV_ALPHA_TYPE_NONE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, alphaInfo_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.whensunset.wsvideoeditorsdk.model.MediaAsset prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * 表示一个多媒体素材
   * </pre>
   *
   * Protobuf type {@code whensunset.wsvideoeditor.model.MediaAsset}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.whensunset.wsvideoeditorsdk.model.MediaAsset, Builder> implements
      // @@protoc_insertion_point(builder_implements:whensunset.wsvideoeditor.model.MediaAsset)
      com.whensunset.wsvideoeditorsdk.model.MediaAssetOrBuilder {
    // Construct using com.whensunset.wsvideoeditorsdk.model.MediaAsset.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    public long getAssetId() {
      return instance.getAssetId();
    }
    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    public Builder setAssetId(long value) {
      copyOnWrite();
      instance.setAssetId(value);
      return this;
    }
    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    public Builder clearAssetId() {
      copyOnWrite();
      instance.clearAssetId();
      return this;
    }

    /**
     * <code>optional string asset_path = 2;</code>
     */
    public java.lang.String getAssetPath() {
      return instance.getAssetPath();
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAssetPathBytes() {
      return instance.getAssetPathBytes();
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public Builder setAssetPath(
        java.lang.String value) {
      copyOnWrite();
      instance.setAssetPath(value);
      return this;
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public Builder clearAssetPath() {
      copyOnWrite();
      instance.clearAssetPath();
      return this;
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public Builder setAssetPathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAssetPathBytes(value);
      return this;
    }

    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public boolean hasMediaAssetFileHolder() {
      return instance.hasMediaAssetFileHolder();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public com.whensunset.wsvideoeditorsdk.model.MediaFileHolder getMediaAssetFileHolder() {
      return instance.getMediaAssetFileHolder();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public Builder setMediaAssetFileHolder(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder value) {
      copyOnWrite();
      instance.setMediaAssetFileHolder(value);
      return this;
      }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public Builder setMediaAssetFileHolder(
        com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.Builder builderForValue) {
      copyOnWrite();
      instance.setMediaAssetFileHolder(builderForValue);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public Builder mergeMediaAssetFileHolder(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder value) {
      copyOnWrite();
      instance.mergeMediaAssetFileHolder(value);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaFileHolder media_asset_file_holder = 3;</code>
     */
    public Builder clearMediaAssetFileHolder() {  copyOnWrite();
      instance.clearMediaAssetFileHolder();
      return this;
    }

    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public java.util.List<com.whensunset.wsvideoeditorsdk.model.TimeRange> getClippedTimeRangeList() {
      return java.util.Collections.unmodifiableList(
          instance.getClippedTimeRangeList());
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public int getClippedTimeRangeCount() {
      return instance.getClippedTimeRangeCount();
    }/**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public com.whensunset.wsvideoeditorsdk.model.TimeRange getClippedTimeRange(int index) {
      return instance.getClippedTimeRange(index);
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder setClippedTimeRange(
        int index, com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
      copyOnWrite();
      instance.setClippedTimeRange(index, value);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder setClippedTimeRange(
        int index, com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
      copyOnWrite();
      instance.setClippedTimeRange(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder addClippedTimeRange(com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
      copyOnWrite();
      instance.addClippedTimeRange(value);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder addClippedTimeRange(
        int index, com.whensunset.wsvideoeditorsdk.model.TimeRange value) {
      copyOnWrite();
      instance.addClippedTimeRange(index, value);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder addClippedTimeRange(
        com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
      copyOnWrite();
      instance.addClippedTimeRange(builderForValue);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder addClippedTimeRange(
        int index, com.whensunset.wsvideoeditorsdk.model.TimeRange.Builder builderForValue) {
      copyOnWrite();
      instance.addClippedTimeRange(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder addAllClippedTimeRange(
        java.lang.Iterable<? extends com.whensunset.wsvideoeditorsdk.model.TimeRange> values) {
      copyOnWrite();
      instance.addAllClippedTimeRange(values);
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder clearClippedTimeRange() {
      copyOnWrite();
      instance.clearClippedTimeRange();
      return this;
    }
    /**
     * <pre>
     * 当前素材被剪裁的时间区域
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.TimeRange clipped_time_range = 4;</code>
     */
    public Builder removeClippedTimeRange(int index) {
      copyOnWrite();
      instance.removeClippedTimeRange(index);
      return this;
    }

    /**
     * <pre>
     * 声音大小
     * </pre>
     *
     * <code>optional double volume = 5;</code>
     */
    public double getVolume() {
      return instance.getVolume();
    }
    /**
     * <pre>
     * 声音大小
     * </pre>
     *
     * <code>optional double volume = 5;</code>
     */
    public Builder setVolume(double value) {
      copyOnWrite();
      instance.setVolume(value);
      return this;
    }
    /**
     * <pre>
     * 声音大小
     * </pre>
     *
     * <code>optional double volume = 5;</code>
     */
    public Builder clearVolume() {
      copyOnWrite();
      instance.clearVolume();
      return this;
    }

    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
     */
    public int getMediaAssetScaleTypeValue() {
      return instance.getMediaAssetScaleTypeValue();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
     */
    public Builder setMediaAssetScaleTypeValue(int value) {
      copyOnWrite();
      instance.setMediaAssetScaleTypeValue(value);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
     */
    public com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType getMediaAssetScaleType() {
      return instance.getMediaAssetScaleType();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
     */
    public Builder setMediaAssetScaleType(com.whensunset.wsvideoeditorsdk.model.MediaAssetScaleType value) {
      copyOnWrite();
      instance.setMediaAssetScaleType(value);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.MediaAssetScaleType media_asset_scale_type = 6;</code>
     */
    public Builder clearMediaAssetScaleType() {
      copyOnWrite();
      instance.clearMediaAssetScaleType();
      return this;
    }

    /**
     * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
     */
    public int getAlphaInfoValue() {
      return instance.getAlphaInfoValue();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
     */
    public Builder setAlphaInfoValue(int value) {
      copyOnWrite();
      instance.setAlphaInfoValue(value);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
     */
    public com.whensunset.wsvideoeditorsdk.model.YuvAlphaType getAlphaInfo() {
      return instance.getAlphaInfo();
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
     */
    public Builder setAlphaInfo(com.whensunset.wsvideoeditorsdk.model.YuvAlphaType value) {
      copyOnWrite();
      instance.setAlphaInfo(value);
      return this;
    }
    /**
     * <code>optional .whensunset.wsvideoeditor.model.YuvAlphaType alpha_info = 7;</code>
     */
    public Builder clearAlphaInfo() {
      copyOnWrite();
      instance.clearAlphaInfo();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:whensunset.wsvideoeditor.model.MediaAsset)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.whensunset.wsvideoeditorsdk.model.MediaAsset();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        clippedTimeRange_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.whensunset.wsvideoeditorsdk.model.MediaAsset other = (com.whensunset.wsvideoeditorsdk.model.MediaAsset) arg1;
        assetId_ = visitor.visitLong(assetId_ != 0L, assetId_,
            other.assetId_ != 0L, other.assetId_);
        assetPath_ = visitor.visitString(!assetPath_.isEmpty(), assetPath_,
            !other.assetPath_.isEmpty(), other.assetPath_);
        mediaAssetFileHolder_ = visitor.visitMessage(mediaAssetFileHolder_, other.mediaAssetFileHolder_);
        clippedTimeRange_= visitor.visitList(clippedTimeRange_, other.clippedTimeRange_);
        volume_ = visitor.visitDouble(volume_ != 0D, volume_,
            other.volume_ != 0D, other.volume_);
        mediaAssetScaleType_ = visitor.visitInt(mediaAssetScaleType_ != 0, mediaAssetScaleType_,    other.mediaAssetScaleType_ != 0, other.mediaAssetScaleType_);
        alphaInfo_ = visitor.visitInt(alphaInfo_ != 0, alphaInfo_,    other.alphaInfo_ != 0, other.alphaInfo_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                assetId_ = input.readUInt64();
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                assetPath_ = s;
                break;
              }
              case 26: {
                com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.Builder subBuilder = null;
                if (mediaAssetFileHolder_ != null) {
                  subBuilder = mediaAssetFileHolder_.toBuilder();
                }
                mediaAssetFileHolder_ = input.readMessage(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mediaAssetFileHolder_);
                  mediaAssetFileHolder_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                if (!clippedTimeRange_.isModifiable()) {
                  clippedTimeRange_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(clippedTimeRange_);
                }
                clippedTimeRange_.add(
                    input.readMessage(com.whensunset.wsvideoeditorsdk.model.TimeRange.parser(), extensionRegistry));
                break;
              }
              case 41: {

                volume_ = input.readDouble();
                break;
              }
              case 48: {
                int rawValue = input.readEnum();

                mediaAssetScaleType_ = rawValue;
                break;
              }
              case 56: {
                int rawValue = input.readEnum();

                alphaInfo_ = rawValue;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.whensunset.wsvideoeditorsdk.model.MediaAsset.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaAsset)
  private static final com.whensunset.wsvideoeditorsdk.model.MediaAsset DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MediaAsset();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaAsset getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MediaAsset> PARSER;

  public static com.google.protobuf.Parser<MediaAsset> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

