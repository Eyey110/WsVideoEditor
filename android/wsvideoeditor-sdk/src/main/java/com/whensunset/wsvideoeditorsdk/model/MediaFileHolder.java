// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_video_editor_sdk.proto

package com.whensunset.wsvideoeditorsdk.model;

/**
 * <pre>
 * 储存一个多媒体文件的信息，减少反复解析的性能消耗
 * </pre>
 *
 * Protobuf type {@code whensunset.wsvideoeditor.model.MediaFileHolder}
 */
public  final class MediaFileHolder extends
    com.google.protobuf.GeneratedMessageLite<
        MediaFileHolder, MediaFileHolder.Builder> implements
    // @@protoc_insertion_point(message_implements:whensunset.wsvideoeditor.model.MediaFileHolder)
    MediaFileHolderOrBuilder {
  private MediaFileHolder() {
    path_ = "";
    formatName_ = "";
    streams_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int PATH_FIELD_NUMBER = 1;
  private java.lang.String path_;
  /**
   * <code>optional string path = 1;</code>
   */
  public java.lang.String getPath() {
    return path_;
  }
  /**
   * <code>optional string path = 1;</code>
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(path_);
  }
  /**
   * <code>optional string path = 1;</code>
   */
  private void setPath(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    path_ = value;
  }
  /**
   * <code>optional string path = 1;</code>
   */
  private void clearPath() {
    
    path_ = getDefaultInstance().getPath();
  }
  /**
   * <code>optional string path = 1;</code>
   */
  private void setPathBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    path_ = value.toStringUtf8();
  }

  public static final int FORMAT_NAME_FIELD_NUMBER = 2;
  private java.lang.String formatName_;
  /**
   * <pre>
   * 文件的后缀名
   * </pre>
   *
   * <code>optional string format_name = 2;</code>
   */
  public java.lang.String getFormatName() {
    return formatName_;
  }
  /**
   * <pre>
   * 文件的后缀名
   * </pre>
   *
   * <code>optional string format_name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getFormatNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(formatName_);
  }
  /**
   * <pre>
   * 文件的后缀名
   * </pre>
   *
   * <code>optional string format_name = 2;</code>
   */
  private void setFormatName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    formatName_ = value;
  }
  /**
   * <pre>
   * 文件的后缀名
   * </pre>
   *
   * <code>optional string format_name = 2;</code>
   */
  private void clearFormatName() {
    
    formatName_ = getDefaultInstance().getFormatName();
  }
  /**
   * <pre>
   * 文件的后缀名
   * </pre>
   *
   * <code>optional string format_name = 2;</code>
   */
  private void setFormatNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    formatName_ = value.toStringUtf8();
  }

  public static final int PROBE_SCORE_FIELD_NUMBER = 3;
  private int probeScore_;
  /**
   * <code>optional int32 probe_score = 3;</code>
   */
  public int getProbeScore() {
    return probeScore_;
  }
  /**
   * <code>optional int32 probe_score = 3;</code>
   */
  private void setProbeScore(int value) {
    
    probeScore_ = value;
  }
  /**
   * <code>optional int32 probe_score = 3;</code>
   */
  private void clearProbeScore() {
    
    probeScore_ = 0;
  }

  public static final int NUM_STREAMS_FIELD_NUMBER = 4;
  private int numStreams_;
  /**
   * <pre>
   * 文件中的多媒体数据流的数量
   * </pre>
   *
   * <code>optional int32 num_streams = 4;</code>
   */
  public int getNumStreams() {
    return numStreams_;
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的数量
   * </pre>
   *
   * <code>optional int32 num_streams = 4;</code>
   */
  private void setNumStreams(int value) {
    
    numStreams_ = value;
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的数量
   * </pre>
   *
   * <code>optional int32 num_streams = 4;</code>
   */
  private void clearNumStreams() {
    
    numStreams_ = 0;
  }

  public static final int STREAMS_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.ProtobufList<com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder> streams_;
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  public java.util.List<com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder> getStreamsList() {
    return streams_;
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  public java.util.List<? extends com.whensunset.wsvideoeditorsdk.model.MediaStreamHolderOrBuilder> 
      getStreamsOrBuilderList() {
    return streams_;
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  public int getStreamsCount() {
    return streams_.size();
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder getStreams(int index) {
    return streams_.get(index);
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  public com.whensunset.wsvideoeditorsdk.model.MediaStreamHolderOrBuilder getStreamsOrBuilder(
      int index) {
    return streams_.get(index);
  }
  private void ensureStreamsIsMutable() {
    if (!streams_.isModifiable()) {
      streams_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(streams_);
     }
  }

  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void setStreams(
      int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureStreamsIsMutable();
    streams_.set(index, value);
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void setStreams(
      int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
    ensureStreamsIsMutable();
    streams_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void addStreams(com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureStreamsIsMutable();
    streams_.add(value);
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void addStreams(
      int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureStreamsIsMutable();
    streams_.add(index, value);
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void addStreams(
      com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
    ensureStreamsIsMutable();
    streams_.add(builderForValue.build());
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void addStreams(
      int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
    ensureStreamsIsMutable();
    streams_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void addAllStreams(
      java.lang.Iterable<? extends com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder> values) {
    ensureStreamsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, streams_);
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void clearStreams() {
    streams_ = emptyProtobufList();
  }
  /**
   * <pre>
   * 文件中的多媒体数据流的信息列表
   * </pre>
   *
   * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
   */
  private void removeStreams(int index) {
    ensureStreamsIsMutable();
    streams_.remove(index);
  }

  public static final int MEDIA_STREMA_INDEX_FIELD_NUMBER = 6;
  private int mediaStremaIndex_;
  /**
   * <pre>
   * 文件中多媒体信息流中最优的视频流
   * </pre>
   *
   * <code>optional int32 media_strema_index = 6;</code>
   */
  public int getMediaStremaIndex() {
    return mediaStremaIndex_;
  }
  /**
   * <pre>
   * 文件中多媒体信息流中最优的视频流
   * </pre>
   *
   * <code>optional int32 media_strema_index = 6;</code>
   */
  private void setMediaStremaIndex(int value) {
    
    mediaStremaIndex_ = value;
  }
  /**
   * <pre>
   * 文件中多媒体信息流中最优的视频流
   * </pre>
   *
   * <code>optional int32 media_strema_index = 6;</code>
   */
  private void clearMediaStremaIndex() {
    
    mediaStremaIndex_ = 0;
  }

  public static final int AUDIO_STREMA_INDEX_FIELD_NUMBER = 7;
  private int audioStremaIndex_;
  /**
   * <pre>
   * 文件中多媒体信息流中最优的音频流
   * </pre>
   *
   * <code>optional int32 audio_strema_index = 7;</code>
   */
  public int getAudioStremaIndex() {
    return audioStremaIndex_;
  }
  /**
   * <pre>
   * 文件中多媒体信息流中最优的音频流
   * </pre>
   *
   * <code>optional int32 audio_strema_index = 7;</code>
   */
  private void setAudioStremaIndex(int value) {
    
    audioStremaIndex_ = value;
  }
  /**
   * <pre>
   * 文件中多媒体信息流中最优的音频流
   * </pre>
   *
   * <code>optional int32 audio_strema_index = 7;</code>
   */
  private void clearAudioStremaIndex() {
    
    audioStremaIndex_ = 0;
  }

  public static final int DURATION_FIELD_NUMBER = 8;
  private double duration_;
  /**
   * <pre>
   * 时长
   * </pre>
   *
   * <code>optional double duration = 8;</code>
   */
  public double getDuration() {
    return duration_;
  }
  /**
   * <pre>
   * 时长
   * </pre>
   *
   * <code>optional double duration = 8;</code>
   */
  private void setDuration(double value) {
    
    duration_ = value;
  }
  /**
   * <pre>
   * 时长
   * </pre>
   *
   * <code>optional double duration = 8;</code>
   */
  private void clearDuration() {
    
    duration_ = 0D;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!path_.isEmpty()) {
      output.writeString(1, getPath());
    }
    if (!formatName_.isEmpty()) {
      output.writeString(2, getFormatName());
    }
    if (probeScore_ != 0) {
      output.writeInt32(3, probeScore_);
    }
    if (numStreams_ != 0) {
      output.writeInt32(4, numStreams_);
    }
    for (int i = 0; i < streams_.size(); i++) {
      output.writeMessage(5, streams_.get(i));
    }
    if (mediaStremaIndex_ != 0) {
      output.writeInt32(6, mediaStremaIndex_);
    }
    if (audioStremaIndex_ != 0) {
      output.writeInt32(7, audioStremaIndex_);
    }
    if (duration_ != 0D) {
      output.writeDouble(8, duration_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!path_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getPath());
    }
    if (!formatName_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getFormatName());
    }
    if (probeScore_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, probeScore_);
    }
    if (numStreams_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, numStreams_);
    }
    for (int i = 0; i < streams_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, streams_.get(i));
    }
    if (mediaStremaIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, mediaStremaIndex_);
    }
    if (audioStremaIndex_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, audioStremaIndex_);
    }
    if (duration_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(8, duration_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.whensunset.wsvideoeditorsdk.model.MediaFileHolder prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * 储存一个多媒体文件的信息，减少反复解析的性能消耗
   * </pre>
   *
   * Protobuf type {@code whensunset.wsvideoeditor.model.MediaFileHolder}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.whensunset.wsvideoeditorsdk.model.MediaFileHolder, Builder> implements
      // @@protoc_insertion_point(builder_implements:whensunset.wsvideoeditor.model.MediaFileHolder)
      com.whensunset.wsvideoeditorsdk.model.MediaFileHolderOrBuilder {
    // Construct using com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional string path = 1;</code>
     */
    public java.lang.String getPath() {
      return instance.getPath();
    }
    /**
     * <code>optional string path = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      return instance.getPathBytes();
    }
    /**
     * <code>optional string path = 1;</code>
     */
    public Builder setPath(
        java.lang.String value) {
      copyOnWrite();
      instance.setPath(value);
      return this;
    }
    /**
     * <code>optional string path = 1;</code>
     */
    public Builder clearPath() {
      copyOnWrite();
      instance.clearPath();
      return this;
    }
    /**
     * <code>optional string path = 1;</code>
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPathBytes(value);
      return this;
    }

    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public java.lang.String getFormatName() {
      return instance.getFormatName();
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFormatNameBytes() {
      return instance.getFormatNameBytes();
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public Builder setFormatName(
        java.lang.String value) {
      copyOnWrite();
      instance.setFormatName(value);
      return this;
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public Builder clearFormatName() {
      copyOnWrite();
      instance.clearFormatName();
      return this;
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public Builder setFormatNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFormatNameBytes(value);
      return this;
    }

    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    public int getProbeScore() {
      return instance.getProbeScore();
    }
    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    public Builder setProbeScore(int value) {
      copyOnWrite();
      instance.setProbeScore(value);
      return this;
    }
    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    public Builder clearProbeScore() {
      copyOnWrite();
      instance.clearProbeScore();
      return this;
    }

    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    public int getNumStreams() {
      return instance.getNumStreams();
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    public Builder setNumStreams(int value) {
      copyOnWrite();
      instance.setNumStreams(value);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    public Builder clearNumStreams() {
      copyOnWrite();
      instance.clearNumStreams();
      return this;
    }

    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public java.util.List<com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder> getStreamsList() {
      return java.util.Collections.unmodifiableList(
          instance.getStreamsList());
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public int getStreamsCount() {
      return instance.getStreamsCount();
    }/**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder getStreams(int index) {
      return instance.getStreams(index);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder setStreams(
        int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
      copyOnWrite();
      instance.setStreams(index, value);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder setStreams(
        int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
      copyOnWrite();
      instance.setStreams(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder addStreams(com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
      copyOnWrite();
      instance.addStreams(value);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder addStreams(
        int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder value) {
      copyOnWrite();
      instance.addStreams(index, value);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder addStreams(
        com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
      copyOnWrite();
      instance.addStreams(builderForValue);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder addStreams(
        int index, com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.Builder builderForValue) {
      copyOnWrite();
      instance.addStreams(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder addAllStreams(
        java.lang.Iterable<? extends com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder> values) {
      copyOnWrite();
      instance.addAllStreams(values);
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder clearStreams() {
      copyOnWrite();
      instance.clearStreams();
      return this;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.wsvideoeditor.model.MediaStreamHolder streams = 5;</code>
     */
    public Builder removeStreams(int index) {
      copyOnWrite();
      instance.removeStreams(index);
      return this;
    }

    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 media_strema_index = 6;</code>
     */
    public int getMediaStremaIndex() {
      return instance.getMediaStremaIndex();
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 media_strema_index = 6;</code>
     */
    public Builder setMediaStremaIndex(int value) {
      copyOnWrite();
      instance.setMediaStremaIndex(value);
      return this;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 media_strema_index = 6;</code>
     */
    public Builder clearMediaStremaIndex() {
      copyOnWrite();
      instance.clearMediaStremaIndex();
      return this;
    }

    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    public int getAudioStremaIndex() {
      return instance.getAudioStremaIndex();
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    public Builder setAudioStremaIndex(int value) {
      copyOnWrite();
      instance.setAudioStremaIndex(value);
      return this;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    public Builder clearAudioStremaIndex() {
      copyOnWrite();
      instance.clearAudioStremaIndex();
      return this;
    }

    /**
     * <pre>
     * 时长
     * </pre>
     *
     * <code>optional double duration = 8;</code>
     */
    public double getDuration() {
      return instance.getDuration();
    }
    /**
     * <pre>
     * 时长
     * </pre>
     *
     * <code>optional double duration = 8;</code>
     */
    public Builder setDuration(double value) {
      copyOnWrite();
      instance.setDuration(value);
      return this;
    }
    /**
     * <pre>
     * 时长
     * </pre>
     *
     * <code>optional double duration = 8;</code>
     */
    public Builder clearDuration() {
      copyOnWrite();
      instance.clearDuration();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:whensunset.wsvideoeditor.model.MediaFileHolder)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.whensunset.wsvideoeditorsdk.model.MediaFileHolder();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        streams_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.whensunset.wsvideoeditorsdk.model.MediaFileHolder other = (com.whensunset.wsvideoeditorsdk.model.MediaFileHolder) arg1;
        path_ = visitor.visitString(!path_.isEmpty(), path_,
            !other.path_.isEmpty(), other.path_);
        formatName_ = visitor.visitString(!formatName_.isEmpty(), formatName_,
            !other.formatName_.isEmpty(), other.formatName_);
        probeScore_ = visitor.visitInt(probeScore_ != 0, probeScore_,
            other.probeScore_ != 0, other.probeScore_);
        numStreams_ = visitor.visitInt(numStreams_ != 0, numStreams_,
            other.numStreams_ != 0, other.numStreams_);
        streams_= visitor.visitList(streams_, other.streams_);
        mediaStremaIndex_ = visitor.visitInt(mediaStremaIndex_ != 0, mediaStremaIndex_,
            other.mediaStremaIndex_ != 0, other.mediaStremaIndex_);
        audioStremaIndex_ = visitor.visitInt(audioStremaIndex_ != 0, audioStremaIndex_,
            other.audioStremaIndex_ != 0, other.audioStremaIndex_);
        duration_ = visitor.visitDouble(duration_ != 0D, duration_,
            other.duration_ != 0D, other.duration_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                path_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                formatName_ = s;
                break;
              }
              case 24: {

                probeScore_ = input.readInt32();
                break;
              }
              case 32: {

                numStreams_ = input.readInt32();
                break;
              }
              case 42: {
                if (!streams_.isModifiable()) {
                  streams_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(streams_);
                }
                streams_.add(
                    input.readMessage(com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.parser(), extensionRegistry));
                break;
              }
              case 48: {

                mediaStremaIndex_ = input.readInt32();
                break;
              }
              case 56: {

                audioStremaIndex_ = input.readInt32();
                break;
              }
              case 65: {

                duration_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.whensunset.wsvideoeditorsdk.model.MediaFileHolder.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaFileHolder)
  private static final com.whensunset.wsvideoeditorsdk.model.MediaFileHolder DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MediaFileHolder();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaFileHolder getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MediaFileHolder> PARSER;

  public static com.google.protobuf.Parser<MediaFileHolder> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

