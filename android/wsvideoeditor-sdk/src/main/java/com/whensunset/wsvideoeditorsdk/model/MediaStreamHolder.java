// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_video_editor_sdk.proto

package com.whensunset.wsvideoeditorsdk.model;

/**
 * <pre>
 * 一个多媒体文件的一个多媒体数据流的信息
 * </pre>
 *
 * Protobuf type {@code whensunset.wsvideoeditor.model.MediaStreamHolder}
 */
public  final class MediaStreamHolder extends
    com.google.protobuf.GeneratedMessageLite<
        MediaStreamHolder, MediaStreamHolder.Builder> implements
    // @@protoc_insertion_point(message_implements:whensunset.wsvideoeditor.model.MediaStreamHolder)
    MediaStreamHolderOrBuilder {
  private MediaStreamHolder() {
    codecType_ = "";
  }
  public static final int WIDTH_FIELD_NUMBER = 1;
  private int width_;
  /**
   * <pre>
   * 视频的长和宽
   * </pre>
   *
   * <code>optional int32 width = 1;</code>
   */
  public int getWidth() {
    return width_;
  }
  /**
   * <pre>
   * 视频的长和宽
   * </pre>
   *
   * <code>optional int32 width = 1;</code>
   */
  private void setWidth(int value) {
    
    width_ = value;
  }
  /**
   * <pre>
   * 视频的长和宽
   * </pre>
   *
   * <code>optional int32 width = 1;</code>
   */
  private void clearWidth() {
    
    width_ = 0;
  }

  public static final int HEIGHT_FIELD_NUMBER = 2;
  private int height_;
  /**
   * <code>optional int32 height = 2;</code>
   */
  public int getHeight() {
    return height_;
  }
  /**
   * <code>optional int32 height = 2;</code>
   */
  private void setHeight(int value) {
    
    height_ = value;
  }
  /**
   * <code>optional int32 height = 2;</code>
   */
  private void clearHeight() {
    
    height_ = 0;
  }

  public static final int CODEC_TYPE_FIELD_NUMBER = 3;
  private java.lang.String codecType_;
  /**
   * <pre>
   * 编解码器的名称
   * </pre>
   *
   * <code>optional string codec_type = 3;</code>
   */
  public java.lang.String getCodecType() {
    return codecType_;
  }
  /**
   * <pre>
   * 编解码器的名称
   * </pre>
   *
   * <code>optional string codec_type = 3;</code>
   */
  public com.google.protobuf.ByteString
      getCodecTypeBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(codecType_);
  }
  /**
   * <pre>
   * 编解码器的名称
   * </pre>
   *
   * <code>optional string codec_type = 3;</code>
   */
  private void setCodecType(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    codecType_ = value;
  }
  /**
   * <pre>
   * 编解码器的名称
   * </pre>
   *
   * <code>optional string codec_type = 3;</code>
   */
  private void clearCodecType() {
    
    codecType_ = getDefaultInstance().getCodecType();
  }
  /**
   * <pre>
   * 编解码器的名称
   * </pre>
   *
   * <code>optional string codec_type = 3;</code>
   */
  private void setCodecTypeBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    codecType_ = value.toStringUtf8();
  }

  public static final int ROTATION_FIELD_NUMBER = 4;
  private int rotation_;
  /**
   * <pre>
   * 视频的旋转角度
   * </pre>
   *
   * <code>optional int32 rotation = 4;</code>
   */
  public int getRotation() {
    return rotation_;
  }
  /**
   * <pre>
   * 视频的旋转角度
   * </pre>
   *
   * <code>optional int32 rotation = 4;</code>
   */
  private void setRotation(int value) {
    
    rotation_ = value;
  }
  /**
   * <pre>
   * 视频的旋转角度
   * </pre>
   *
   * <code>optional int32 rotation = 4;</code>
   */
  private void clearRotation() {
    
    rotation_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (width_ != 0) {
      output.writeInt32(1, width_);
    }
    if (height_ != 0) {
      output.writeInt32(2, height_);
    }
    if (!codecType_.isEmpty()) {
      output.writeString(3, getCodecType());
    }
    if (rotation_ != 0) {
      output.writeInt32(4, rotation_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (width_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, width_);
    }
    if (height_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, height_);
    }
    if (!codecType_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getCodecType());
    }
    if (rotation_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, rotation_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * 一个多媒体文件的一个多媒体数据流的信息
   * </pre>
   *
   * Protobuf type {@code whensunset.wsvideoeditor.model.MediaStreamHolder}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder, Builder> implements
      // @@protoc_insertion_point(builder_implements:whensunset.wsvideoeditor.model.MediaStreamHolder)
      com.whensunset.wsvideoeditorsdk.model.MediaStreamHolderOrBuilder {
    // Construct using com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    public int getWidth() {
      return instance.getWidth();
    }
    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    public Builder setWidth(int value) {
      copyOnWrite();
      instance.setWidth(value);
      return this;
    }
    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    public Builder clearWidth() {
      copyOnWrite();
      instance.clearWidth();
      return this;
    }

    /**
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return instance.getHeight();
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    public Builder setHeight(int value) {
      copyOnWrite();
      instance.setHeight(value);
      return this;
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    public Builder clearHeight() {
      copyOnWrite();
      instance.clearHeight();
      return this;
    }

    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public java.lang.String getCodecType() {
      return instance.getCodecType();
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCodecTypeBytes() {
      return instance.getCodecTypeBytes();
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public Builder setCodecType(
        java.lang.String value) {
      copyOnWrite();
      instance.setCodecType(value);
      return this;
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public Builder clearCodecType() {
      copyOnWrite();
      instance.clearCodecType();
      return this;
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public Builder setCodecTypeBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCodecTypeBytes(value);
      return this;
    }

    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    public int getRotation() {
      return instance.getRotation();
    }
    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    public Builder setRotation(int value) {
      copyOnWrite();
      instance.setRotation(value);
      return this;
    }
    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    public Builder clearRotation() {
      copyOnWrite();
      instance.clearRotation();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:whensunset.wsvideoeditor.model.MediaStreamHolder)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder other = (com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder) arg1;
        width_ = visitor.visitInt(width_ != 0, width_,
            other.width_ != 0, other.width_);
        height_ = visitor.visitInt(height_ != 0, height_,
            other.height_ != 0, other.height_);
        codecType_ = visitor.visitString(!codecType_.isEmpty(), codecType_,
            !other.codecType_.isEmpty(), other.codecType_);
        rotation_ = visitor.visitInt(rotation_ != 0, rotation_,
            other.rotation_ != 0, other.rotation_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                width_ = input.readInt32();
                break;
              }
              case 16: {

                height_ = input.readInt32();
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                codecType_ = s;
                break;
              }
              case 32: {

                rotation_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:whensunset.wsvideoeditor.model.MediaStreamHolder)
  private static final com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MediaStreamHolder();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.whensunset.wsvideoeditorsdk.model.MediaStreamHolder getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MediaStreamHolder> PARSER;

  public static com.google.protobuf.Parser<MediaStreamHolder> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

